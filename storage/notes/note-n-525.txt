<h1 style="text-align: center;">Samenvatting Examenstof CICQ2</h1><div style="text-align: center;"><img src="https://img.freepik.com/free-vector/isometric-cms-concept_23-2148807389.jpg?size=626&amp;ext=jpg&amp;ga=GA1.1.1700460183.1712966400&amp;semt=ais" alt="Software Illustration Images - Free Download on Freepik"><br></div><h2>Wat is maintainability?</h2><div><ul><li>Reusability</li><li>Modularity</li><li>Testability<br></li><li>Modifiability</li><li>Anylisability</li></ul><div><br></div></div><div>Maintainability represents the degree of effectiveness and efficiency with which a product or system can be modified to improve it, correct it or adapt it to changes in the environment, and in requirements.</div><div><br></div><div>Reusability&nbsp;</div><div>Onderdelen hergebruikt kunnen worden in hetzelfde of andere software</div><div><br></div><div>Modularity</div><div>Verandering minimale impact heeft op (andere) onderdelen</div><div><br></div><div>Testability</div><div>Software test opgesteld en uitgevoerd kunnen worden&nbsp;</div><div><span style="background-color: var(--background); color: var(--editor-text);"><br></span></div><div><span style="background-color: var(--background); color: var(--editor-text);">Modifiability</span></div><div>De software aangepast kan worden zonder fouten</div><div><br></div><div>Anylisability</div><div>De software te doorzien en te diagnosticeren is</div><div><br></div><div><br></div><h2>Een goede structuur</h2><div><ol><li>Seperation of concerns</li><li>High cohesion&nbsp;</li><li>Loose coupling</li></ol><div><br></div></div><h2>Het object model van Booch</h2><div><ol><li>Abstraction</li><li>Encapsulation</li><li>Modularity</li><li>Hierarchy</li></ol><h3>Abstraction</h3></div><div>Versimpel van model</div><div><ul><li>Verbergen van details&nbsp;</li><li>Alleen essentiele informatie laten zien</li></ul><div><span style="font-weight: bold;">Objecten </span>als kernabstractie,&nbsp;</div></div><div>groepereing van :</div><div><ul><li>Gedrag, methods&nbsp;</li><li>Toestand, fields</li></ul><div><span style="font-weight: bold;">Klassen </span>als blauwdruk&nbsp;</div></div><div>in (OO based programming)</div><div><br></div><h3>Encapsulation (Tell, don't ask)</h3><div>Object bevat gedrag en toestand</div><div><ul><li>Gericht op een functionaliteit&nbsp;</li><li><span style="font-style: italic;">Encapsulate ehat varies&nbsp;</span></li><li>Modularity</li></ul><div>Afgeschermd van andere objecten door middel van&nbsp;</div></div><div><span style="font-weight: bold;">visibility</span></div><div><ul><li>Private, protected, public</li><li>information hiding</li></ul><div>Toegang alleen via de publieke methods</div></div><div>(Object's API)</div><div><br></div><div>Het object is:</div><div><ul><li>Verantwoordelijk</li><li>Kenniseigenaar&nbsp;</li><li>Uitvoerende&nbsp;</li></ul><div><span style="font-weight: bold;">Niet</span>: Data uit object halen <span style="font-weight: bold;">(getters)</span></div></div><div>verwerken en dan weer terug geven <span style="font-weight: bold;">(setters)</span></div><div><span style="font-weight: bold;"><br></span></div><div><span style="font-weight: bold;">Liever: </span>Het object vertellen wat te doen</div><div><br></div><h2>Don't repeat yourself (DRY)</h2><div><br></div><h2>Code smells</h2><div style="text-align: center;"><img src="https://typoapp.io/blog/wp-content/uploads/2024/01/Understand-code-smells-%E2%80%93-1-1.jpg" alt="Understanding Code Smells and How to Avoid Them - Typo"><br></div><div>De aanwaijzing dat er ergens iets niet helemaal goed</div><div>zou kunnen zijn qua structuur of ontwerp</div><div><br></div><div><ul><li>Een indicatie van een mogelijk ontwerpprobleem&nbsp;</li></ul><div>Hier kan je op 3 manieren mee omgaan:</div></div><div><ol><li>Negeren, onverstandig</li><li>Per geval beoordelen of je het kan/moet oplossen, verstandig</li><li>Altijd vermijden, puristisch</li></ol><div><br></div></div><div><span style="font-weight: bold;">Lengte</span></div><div>De hoeveelheid code is belangrijk</div><div><span style="font-weight: bold;">minder code</span> betekent <span style="font-weight: bold;">minder bugs</span></div><div><span style="font-weight: bold;"><br></span></div><div>Maar ga niet:</div><div><ul><li>Variabelen verkorten</li><li>White space weghalen</li><li>Formatting versimpelen</li><li>Bracketless if statements<br></li></ul><div>Hierdoor word je code minder leesbarr en onderhoudbaar</div></div><div><br></div><h3>Meaningfull names&nbsp;</h3><div>- Geef variabelen namen die betekenis hebben</div><div><br></div><div>- Wees consistent, duidelijk en maak onderscheid</div><div><span style="font-style: italic;">Geen verwarrende namen die verkeerd geinterpreteerd kunnen worden.</span></div><div><br></div><div>- Geen flauwigheid, memes of onduidelijke metamorfen.&nbsp;</div><div><br></div><div>- Zorg dat namen uitgesproken en gevonden kunnen worden</div><div><span style="font-style: italic;">Maak ze voorspelbaar</span></div><div><span style="font-style: italic;"><br></span></div><div>- Beschouw de naam in de context waarbinnen deze gebruikt wordt.</div><div><span style="font-style: italic;">De player heeft een name geen playerName</span></div><div><span style="font-style: italic;"><br></span></div><h3>Comments</h3><div>Goede namen zijn beter dan goede comments&nbsp;</div><div><br></div><div>Comments zijn meestal goed als ze:</div><div><ul><li>Verplicht zijn&nbsp;</li><li>Verklarend, informeren of waarschuwend zijn</li><li>Worden gebruikt om documentatie te geneneren</li></ul><div>Comments zijn meestal slecht als ze:</div></div><div><ul><li>Niet uitleggen, niks toevoegen bovenop naamgeving.</li><li>Misleidend of verouderd zijn</li><li>Teveel informatie geven</li></ul><div>We vergeten vaak comments te veranderen als de code word aangepast.</div></div><div><br></div><h3>Functions / methods&nbsp;</h3><div><ul><li>Liever veel kleine methods die 1 ding doen dan 1 grote method die heel veel doet</li><li>Vervang nesting en error handling met method calls&nbsp;</li><li>Hetzelfde abstractie niveau binnen een method (Law of demeter)</li><li>Hoe minder parameters, hoe beter</li><li>Liever een nieuwe method dan extra paremeters toevoegen</li><li>Verwijder dode code en debug code uit productiesoftware&nbsp;</li><li>Maak onderscheid tussen methods met effecten en methods zonder deze</li></ul><div><br></div></div><div><br></div><div><br></div><div><br></div><div><br></div><div><br></div>