<h1 style="text-align: center;">Samenvatting Examenstof CICQ2</h1><div style="text-align: center;"><img src="https://img.freepik.com/free-vector/isometric-cms-concept_23-2148807389.jpg?size=626&amp;ext=jpg&amp;ga=GA1.1.1700460183.1712966400&amp;semt=ais" alt="Software Illustration Images - Free Download on Freepik"><br></div><h2>Wat is maintainability?</h2><div><ul><li>Reusability</li><li>Modularity</li><li>Testability<br></li><li>Modifiability</li><li>Anylisability</li></ul><div><span style="font-weight: bold;">Maintainability (ISO 25010)</span></div></div><div>Maintainability represents the degree of effectiveness and efficiency with which a product or system can be modified to improve it, correct it or adapt it to changes in the environment, and in requirements.</div><div><br></div><div>Reusability&nbsp;</div><div>Onderdelen hergebruikt kunnen worden in hetzelfde of andere software</div><div><br></div><div>Modularity</div><div>Verandering minimale impact heeft op (andere) onderdelen</div><div><br></div><div>Testability</div><div>Software test opgesteld en uitgevoerd kunnen worden&nbsp;</div><div><span style="background-color: var(--background); color: var(--editor-text);"><br></span></div><div><span style="background-color: var(--background); color: var(--editor-text);">Modifiability</span></div><div>De software aangepast kan worden zonder fouten</div><div><br></div><div>Anylisability</div><div>De software te doorzien en te diagnosticeren is</div><div><br></div><div><br></div><h2>Een goede structuur</h2><div><span style="font-weight: bold;">Seperation of concerns&nbsp;</span></div><div>Niet alles op 1 plek, maar op een logische inrichting in modules op basis van verandtwoordelijkheid en abstractienivuea&nbsp;</div><div><span style="background-color: var(--background); color: var(--editor-text);"><br></span></div><div><span style="background-color: var(--background); color: var(--editor-text); font-weight: bold;">High cohesion</span></div><div><span style="background-color: var(--background); color: var(--editor-text);">Modules en hun onderdelen werken samen aan 1 doel&nbsp;</span><span style="background-color: var(--background); color: var(--editor-text); font-weight: bold;">&nbsp;</span></div><div><span style="background-color: var(--background); color: var(--editor-text);"><br></span></div><div><span style="background-color: var(--background); color: var(--editor-text); font-weight: bold;">Loose coupling</span></div><div><span style="background-color: var(--background); color: var(--editor-text);">Modules weten niks van elkaars interne werking.&nbsp;</span></div><div><span style="background-color: var(--background); color: var(--editor-text);">Ze zijn beperkt afhankelijk van elkaar. Veranderingen in 1 module werken beperkt op andere modules.&nbsp;</span></div><div><div><br></div></div><h2>Het object model van Booch</h2><div><ol><li>Abstraction</li><li>Encapsulation</li><li>Modularity</li><li>Hierarchy</li></ol><h3>Abstraction</h3></div><div>Versimpel van model</div><div><ul><li>Verbergen van details&nbsp;</li><li>Alleen essentiele informatie laten zien</li></ul><div><span style="font-weight: bold;">Objecten&nbsp;</span>als kernabstractie,&nbsp;</div></div><div>groepereing van :</div><div><ul><li>Gedrag, methods&nbsp;</li><li>Toestand, fields</li></ul><div><span style="font-weight: bold;">Klassen&nbsp;</span>als blauwdruk&nbsp;</div></div><div>in (OO based programming)</div><div><br></div><h3>Encapsulation (Tell, don't ask)</h3><div>Object bevat gedrag en toestand</div><div><ul><li>Gericht op een functionaliteit&nbsp;</li><li><span style="font-style: italic;">Encapsulate ehat varies&nbsp;</span></li><li>Modularity</li></ul><div>Afgeschermd van andere objecten door middel van&nbsp;</div></div><div><span style="font-weight: bold;">visibility</span></div><div><ul><li>Private, protected, public</li><li>information hiding</li></ul><div>Toegang alleen via de publieke methods</div></div><div>(Object's API)</div><div><br></div><div>Het object is:</div><div><ul><li>Verantwoordelijk</li><li>Kenniseigenaar&nbsp;</li><li>Uitvoerende&nbsp;</li></ul><div><span style="font-weight: bold;">Niet</span>: Data uit object halen&nbsp;<span style="font-weight: bold;">(getters)</span></div></div><div>verwerken en dan weer terug geven&nbsp;<span style="font-weight: bold;">(setters)</span></div><div><span style="font-weight: bold;"><br></span></div><div><span style="font-weight: bold;">Liever:&nbsp;</span>Het object vertellen wat te doen</div><div><br></div><h2>Don't repeat yourself (DRY)</h2><div>Voorkom duplicatie van concepten binnen je code.</div><div><br></div><div>Avoid Hasty Abstractions (AHA)</div><div>Koppel niet te vroeg dingen aan elkaar enkel om duplicaties te voorkomen.</div><div><br></div><div>The rule of three</div><div>Wanneer je op drie verschillende plekken dezelfde code vindt,&nbsp;</div><div>wil je dit misschien anders aanpakken.</div><div><br></div><h2>Code smells</h2><div style="text-align: center;"><img src="https://typoapp.io/blog/wp-content/uploads/2024/01/Understand-code-smells-%E2%80%93-1-1.jpg" alt="Understanding Code Smells and How to Avoid Them - Typo"><br></div><div>De aanwaijzing dat er ergens iets niet helemaal goed</div><div>zou kunnen zijn qua structuur of ontwerp</div><div><br></div><div><ul><li>Een indicatie van een mogelijk ontwerpprobleem&nbsp;</li></ul><div>Hier kan je op 3 manieren mee omgaan:</div></div><div><ol><li>Negeren, onverstandig</li><li>Per geval beoordelen of je het kan/moet oplossen, verstandig</li><li>Altijd vermijden, puristisch</li></ol><div><br></div></div><div><span style="font-weight: bold;">Lengte</span></div><div>De hoeveelheid code is belangrijk</div><div><span style="font-weight: bold;">minder code</span>&nbsp;betekent&nbsp;<span style="font-weight: bold;">minder bugs</span></div><div><span style="font-weight: bold;"><br></span></div><div>Maar ga niet:</div><div><ul><li>Variabelen verkorten</li><li>White space weghalen</li><li>Formatting versimpelen</li><li>Bracketless if statements<br></li></ul><div>Hierdoor word je code minder leesbarr en onderhoudbaar</div></div><div><br></div><h3>Meaningfull names&nbsp;</h3><div>- Geef variabelen namen die betekenis hebben</div><div><br></div><div>- Wees consistent, duidelijk en maak onderscheid</div><div><span style="font-style: italic;">Geen verwarrende namen die verkeerd geinterpreteerd kunnen worden.</span></div><div><br></div><div>- Geen flauwigheid, memes of onduidelijke metamorfen.&nbsp;</div><div><br></div><div>- Zorg dat namen uitgesproken en gevonden kunnen worden</div><div><span style="font-style: italic;">Maak ze voorspelbaar</span></div><div><span style="font-style: italic;"><br></span></div><div>- Beschouw de naam in de context waarbinnen deze gebruikt wordt.</div><div><span style="font-style: italic;">De player heeft een name geen playerName</span></div><div><span style="font-style: italic;"><br></span></div><h3>Comments</h3><div>Goede namen zijn beter dan goede comments&nbsp;</div><div><br></div><div>Comments zijn meestal goed als ze:</div><div><ul><li>Verplicht zijn&nbsp;</li><li>Verklarend, informeren of waarschuwend zijn</li><li>Worden gebruikt om documentatie te geneneren</li></ul><div>Comments zijn meestal slecht als ze:</div></div><div><ul><li>Niet uitleggen, niks toevoegen bovenop naamgeving.</li><li>Misleidend of verouderd zijn</li><li>Teveel informatie geven</li></ul><div>We vergeten vaak comments te veranderen als de code word aangepast.</div></div><div><br></div><h3>Functions / methods&nbsp;</h3><div><ul><li>Liever veel kleine methods die 1 ding doen dan 1 grote method die heel veel doet</li><li>Vervang nesting en error handling met method calls&nbsp;</li><li>Hetzelfde abstractie niveau binnen een method (Law of demeter)</li><li>Hoe minder parameters, hoe beter</li><li>Liever een nieuwe method dan extra paremeters toevoegen</li><li>Verwijder dode code en debug code uit productiesoftware&nbsp;</li><li>Maak onderscheid tussen methods met effecten en methods zonder deze</li></ul><h3>Vertical formatting&nbsp;</h3></div><div>Gerbuik witregels om leesbaarheid te vergroten</div><div><ul><li>Sla een witregel over om concepten te groeperen&nbsp;<span style="background-color: var(--background); color: var(--editor-text);">binnen of buiten een methode</span></li></ul><div>Gebruik&nbsp; volgorde om caller en callee te onderscheiden.</div></div><div><ul><li>Public methods bovenin&nbsp;</li><li>Private methods onderin</li></ul><div><br></div></div><h3>Horizontal formatting</h3><div>Maak regels niet te wijd.</div><div><ul><li>Start op een nieuwe regel met indentation om het meer leesbaar te maken.</li><li>Geen afkortingen om het maar kort te houden.&nbsp;</li></ul><h3>Voorkomen van code smells</h3></div><div><ul><li>Kritisch naar je code kijken.</li><li>Gebruik te maken van style guides.</li><li>Gebruik te maken van code reviews.</li><li>Gebruik te maken van static analysis tools</li><li>Werken met een kwaliteitsgerichte workflow zoals een continuous integration pipeline</li></ul></div><div><br></div><h2>Static analyses&nbsp;</h2><div style="text-align: center;"><img src="https://typoapp.io/blog/wp-content/uploads/2024/04/Static-code-analysis.jpg" alt="A guide to static code analysis - Typo"><br></div><div><br></div><div><span style="font-weight: bold;">Essentiele complexity</span></div><div>Hoe moeilijk zijn de problemen en oplossingen van zichzelf</div><div><br></div><div><span style="font-weight: bold;">Accidental complexity</span></div><div>Hoe moeilijk hebben we problemen en oplsossingen gemaakt</div><div><br></div><h3>McGabe's Cyclomatic complexity (1976)</h3><div>Bereken de complexitied als volgt&nbsp;</div><div>formule:<span style="font-style: italic;">&nbsp;cc = edges - nodes + 2 <span style="vertical-align: super;">2</span></span></div><div><br></div><div>nog even door kijken later&nbsp;</div><div><br></div><h3>NPath complexity (1988)</h3><div><div>De NPath complexity van&nbsp;<span style="background-color: var(--background); color: var(--editor-text);">een stuk code is de som</span></div><div>van de hoeveelheid paden&nbsp;<span style="background-color: var(--background); color: var(--editor-text);">die je af kan leggen tussen</span></div><div>startpunt en eindpunt. Lager is beter !</div></div><div><br></div><div>Deze complexiteid groeit exponentieel.</div><div><br></div><div>2 If statements is 4 paden&nbsp;</div><div>3 If statements is 8 paden.</div><div><br></div><h3>Sonar’s Cognitive Complexity (2016)</h3><div><div>Ontwikkeld door SonarSource om de begrijpelijkheid van code te</div><div>meten</div><div><ul><li>Sluit aan op cyclomatic complexity</li><li>Lager is beter</li></ul></div><div><span style="font-weight: bold;">Doel</span>: realistische metric voor mentale inspanning om code te</div><div>begrijpen</div><div><ul><li>Wat vinden developers over het algemeen moeilijk om te begrijpen?</li></ul></div><div>Drie basisregels:</div><div><ol><li>Ignore shorthand: negeer structuren die meerdere statements&nbsp;<span style="background-color: var(--background); color: var(--editor-text);">samenvatten in één</span></li><li>+1 voor break in linear flow</li><li>+1 voor nested flow-break structures</li></ol><div><span style="font-weight: bold;">Ignore shorthand</span></div></div></div><div>Opbreken van code in kleiner onderdelen en het gebruik van shorthandlanguage features zouden de complexitiet niet negatief moeten beinvloeden.</div><div><br></div><h3>CRAP index</h3><div>Change Risk Analysis and Predictions</div><div><br></div><div>Indicator voor het risico dat het veranderen van een methode (m) met zich meebrengt</div><div>gelet op:</div><div><ul><li>Line coverage: welke regels zijn gedekt?</li><li>Cyclomatic complexity: Hoeveel vertakkingen zijn er?</li></ul><div>CRAP(m) = complexity(m) <span style="vertical-align: super;">2</span> x (1- coverage(m) / 100) <span style="vertical-align: super;">2</span>&nbsp;3 + complexity(m)</div></div><div><br></div><div><div>Hoe minder coverage er is,</div><div>Hoe zwaarder het risico van complexiteit is</div><div><ul><li>100% coverage, CRAP = complexity(m)</li><li><span style="background-color: var(--background); color: var(--editor-text);">0% coverage, CRAP = complexity(m)2</span></li></ul></div><div>Risico verminderen: meer testen en/of meer refactoren</div></div><div><br></div><div><br></div><h3>Software architecture compliance checking&nbsp;</h3><div><span style="font-weight: bold;">Intended </span>architecture en <span style="font-weight: bold;">implemented</span> architecture</div><div>In hoeverre sluit de geimplementeerde architectuur aan op de bedoelde architectuur.</div><div><br></div><div><span style="font-weight: bold;">Arcitectute erosion</span></div><div>De mate waarin de geimplementeerde en bedoelde architectuur</div><div>uit elkaar lopen.</div><div><br></div><h3>ArchUnit&nbsp;</h3><div style="text-align: center;"><img src="https://www.archunit.org/assets/ArchUnit-Logo.png" alt="Unit test your Java architecture - ArchUnit"><br></div><div>Een soort Unit tests voor architectuur</div><div><ul><li><span style="font-weight: bold;">Gegeven </span>een intended architectuur.</li><li><span style="font-weight: bold;">Wanneer </span>ik de geimplementeerde architectuur analyseer.</li><li><span style="font-weight: bold;">Dan </span>verwacht ik dat deze voldoet aan de regels.</li></ul><div>Kan als olugin worden toegevoed in JUnit</div></div><div><br></div><h3>Hawthorne effect&nbsp;</h3><div>De manier hoe een persoon doet of spreekt verandert&nbsp;</div><div>door het bewustzijn van observatie.</div><div><br></div><div><span style="font-weight: bold;">Voorbeeld:</span></div><div>Werknemers veranderen hun gedrag wanneer&nbsp;</div><div>ze weten dat ze geobserveerd worden</div><div><br></div><div>Dit kan positieve effecten hebben.</div><div><ul><li>Verbeterde inzet om goed voor de dag te komen</li></ul><div>Dit kan negatieve gevolgen hebben.&nbsp;</div></div><div><ul><li>Men kan het systeem bespelen om aan de meting te voldoen, zonder dat het doel er mee behaald is.</li></ul></div><div><br></div><h3>Cobra effect</h3><div><div><ul><li>Britse regering bood beloning voor elke dode cobra in Delhi</li><li>Aanvankelijk succesvol, veel slangen gedood voor beloning</li><li>Mensen begonnen cobra’s te fokken voor inkomen</li><li>Beloningsprogramma werd stopgezet</li><li>Cobra-fokkers lieten nu waardeloze cobra’s vrij</li><li>Meer cobra’s!</li><li>Goodhart’s Law</li><li>When a measure becomes a target, it ceases to be a good</li><li>measure.</li></ul></div></div>