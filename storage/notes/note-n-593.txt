<h1 style="text-align: center;">Authentication &amp; Authorization</h1><div style="text-align: center;"><img src="https://www.cyber.gov.au/sites/default/files/2023-02/two-factor-authentication-graphic.png" alt="Turn on multi-factor authentication | Cyber.gov.au"><br></div><h2><br></h2><h2>Encoding</h2><div>Data omkeerbaar transformeren voor gebruik, tonen of vervoer.</div><div><ul><li>Denk aan: ASCII, UTF-8, HTML, URL encoding of Base64</li></ul></div><div><br></div><div>Niet bedoeld om geheimen te bewaren.</div><div>Endcoding schema's zijn bekend of te achterhalen.</div><div><br></div><h2>Encryption</h2><div>Bedoeld om informatie geheim te houden voor iemand anders dan de geadresseerde.</div><div><ul><li>Denk aan: AES, RSA of Blowfish.</li></ul></div><div><br></div><div>Met encryptie transformeer je data in een ander format dat alleen voor bepaalde personen ontcijferbaar is.</div><div><br></div><div>Om te ontcijferen heb je nodig:</div><div><ol><li>De versleutel bron&nbsp;</li><li>De sleutel</li><li>Het gebruikte algoritme</li></ol><div><br></div></div><h3>Public key Cryptography</h3><div><br></div><h2><span style="background-color: var(--background); color: var(--editor-text);">Hashing</span></h2><div><span style="background-color: var(--background); color: var(--editor-text);">Met hashing kan je checken of er iets veranderd is&nbsp;</span></div><div><span style="background-color: var(--background); color: var(--editor-text);">of juist hetzelfde gebleven is.</span></div><div><span style="background-color: var(--background); color: var(--editor-text);"><br></span></div><div><span style="background-color: var(--background); color: var(--editor-text);">Een hash functie pakt een input en produceert een output,&nbsp;</span></div><div><span style="background-color: var(--background); color: var(--editor-text);">een samenvatting van dezelfde lengte:</span></div><div><ul><li><span style="background-color: var(--background); color: var(--editor-text);">MD5, bcrypt, scrypt, PBKDF</span></li></ul><div><br></div></div><h3>Betrouwbare hashing&nbsp;</h3><div>Welke eigenschappen moet een betrouwbare hash functie hebben.&nbsp;</div><div><span style="background-color: var(--background); color: var(--editor-text);"><br></span></div><div><span style="background-color: var(--background); color: var(--editor-text); font-weight: bold;">Reproduceerbaar</span></div><div><ul><li><span style="background-color: var(--background); color: var(--editor-text);">Dezelfde input geeft dezelfde output</span></li></ul><div><span style="font-weight: bold;">Hoge uniciteit</span></div></div><div><ul><li>Verschillende inputs geeft niet dezelfde output</li></ul><div><span style="font-weight: bold;">Onomkeerbaar</span></div></div><div><ul><li>Je kan de input niet raden op basis van output&nbsp;</li></ul><div><span style="font-weight: bold;">Onvoorspelbaar</span></div></div><div><ul><li>Het wijzigen van input moet zorgen voor een groot verschil in de output</li></ul><div><br></div><h3>Password hashing</h3><div><span style="font-weight: bold;">Niet</span>: het wachtwoord opslaan (plain text)</div><div>Sla een hash (+ salt + complexiteitsfactor) op</div></div><div><ul><li>Vergelijk bij het inloggen de password hashes met elkaar: hetzelfde login slaagd</li></ul><div><br></div><div><span style="font-weight: bold;">Hash&nbsp;</span>werkt maar een kant op</div></div><div>Voorkomt dan men wachtwoorden kan inzien&nbsp;</div><div>als zij het database in kunnen.</div><div><br></div><div><span style="font-weight: bold;">Salt&nbsp;</span>flink stuk random data toegevoegd voor het hashen&nbsp;</div><div>om de kans te verkleinen dat twee dezelfde hashes worden opgeslagen.</div><div><br></div><div><span style="font-weight: bold;">Iteraties&nbsp;</span>Computationeel intensief (langzamer)</div><div>Om brute force tegen te gaan.&nbsp;</div><div><br></div><div><br></div><div><br></div><div><h2>Authentication Versus Authorization</h2></div><div><span style="font-weight: bold;">Authentication&nbsp;</span></div><div>Ben je wie je zegt dat je bent.</div><div>Login of api's</div><div><br></div><div><span style="font-weight: bold;">Authorisation&nbsp;</span></div><div>Heb je de rechten om iets te doen?</div><div>Access controll en roles.</div><div><br></div><div><br></div><h3>Authorisation headers in HTTP</h3><div>HTTP kent een aantal manieren om je te authoriseren.</div><div><br></div><div>De drie bekendste manieren zijn:</div><div><br></div><div><span style="font-weight: bold;">1. Basic</span></div><div>Meesturen van base-64 encoded password string in request&nbsp;</div><div>username: password</div><div><br></div><div><span style="font-weight: bold;">2. Digest</span></div><div>Meesturen username, password, nonce (random string)&nbsp;</div><div>om replay attacks te voorkomen</div><div><br></div><div><span style="font-weight: bold;">3. Bearer</span></div><div>Een token gebruiken, welke gebruikt kan worden door de drager ervan (bearer)</div><div>Token kan ook authorisatiegegevens bevatten.</div><h3><br></h3><h2>REST Principles</h2><div><ul><li>Client / server&nbsp;</li><li>Stateless</li><li>Cacheable&nbsp;</li><li>Uniform interface&nbsp;</li><li>Layered system</li><li>Code on demand</li></ul><div><span style="font-weight: bold;">Stateless&nbsp;</span>means authenticate users with every request.&nbsp;</div></div><div>Don't persist client state on the server.</div><div><br></div><div><br></div><h2>JSON Web token (JWT)</h2><div>JWTs zijn niet zonder uitdaging&nbsp;</div><div><br></div><div><span style="font-weight: bold;">Ongeschikt voor gevoelige data</span></div><div><ul><li><span style="background-color: var(--background); color: var(--editor-text);">De inhoud van de token kan gewoon uitgelezen worden.</span></li></ul><div><span style="font-weight: bold;">Gevoelig voor gebruik door anderen</span></div></div><div><ul><li>De token zou gedeeld uitgelezen kunnen worden door anderen dan degene aan wie het is gegeven.</li><li>Daarom ook end to end encryption</li></ul><div><span style="font-weight: bold;">Weinig controle na uitgave token</span></div></div><div><ul><li>Een gebruiker uitlogen kan eigenlijk niet met JWT</li><li>Als er sprake is van misbruik, kan je de token niet zomaar intrekken.</li><li>Als de rechten van een gebruiker wijzigen, is dat niet ineens in de token opgenomen. Pas wanneer er weer een nieuwe token is.</li></ul><div><br></div><h2>Filter chain</h2><div>Binnenkomende requests gaan door een&nbsp;<span style="font-weight: bold;">Filter Chain</span></div><div>Een filter chain bestaat uit een aantal filters.</div><div><br></div><div>Elke filter heeft een bepaalde verantwoordelijkheid.</div><div>Uiteindelijk komt het request bij de servlet die verantwoordelijk is voor de inhoudelijke afhandeling van de request (@RestController)</div><div><br></div><div><br></div><div><img src="https://docs.spring.io/spring-security/reference/_images/servlet/architecture/filterchain.png" alt="Architecture :: Spring Security"></div></div>