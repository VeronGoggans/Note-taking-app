<div><div>Een stijl van programmeren</div><ul><li>Beschrijven van wat je wilt hebben.</li><li>In plaats van welke stappen men moet zetten.&nbsp;</li></ul><div>Tegenovergestelde van imperative progamming&nbsp;</div></div><div><ul><li>De computer stappen geven om toestanden te wijzigen.</li></ul><div><span style="font-weight: bold; font-style: italic;">Liever expressions dan statements</span></div></div><div><span style="font-weight: bold; font-style: italic;"><br></span></div><div>- Expression</div><div>Een waarde of combinatie van waardes, variabelen, operators en functies&nbsp;</div><div>die uiteindelijk tot een waarde komen.&nbsp;</div><div><br></div><div>- Statement</div><div>Een actie die als stap in een sequentie van instructies&nbsp;</div><div>uitgevoerd wordt, en evalueert niet tot een waarde.&nbsp;</div><div><br></div><h3>Waarom Declarative programming?</h3><div>Minder mentale belasting</div><div><ul><li>Declarative programming isoleert wijzigingen, beperkt mutaties.</li></ul><div>Gedeelde abstracties</div></div><div><ul><li>Vergelijkbaar met design patterns.</li><li><span style="font-weight: bold;">Mogelijk nadeel</span>: veel abstracties kennen.</li></ul></div><h2>Function types</h2><h3>Pure functions</h3><div>Dezelfde argumenten zorgen voor dezelfde return-waarden</div><div>zonder gedrag te veranderen.</div><div><ul><li>Past geen toestand aan (immutability)</li><li>Heeft geen effect op de buitenwereld</li></ul><div><br></div><div>Referential transparency</div><div><span style="background-color: var(--background); color: var(--editor-text); font-size: 11pt;">Vervangen function met onderliggende waarde zonder&nbsp;</span></div><div><span style="background-color: var(--background); color: var(--editor-text); font-size: 11pt;">gedrag te veranderen.</span><br></div><div><ul><li><span style="background-color: var(--background); color: var(--editor-text); font-size: 11pt;">Helpt bij compileroptimalisaties.</span></li></ul></div><div><br></div><h3>First class functions</h3></div><div>Functions als zelfstandige concepten in een taal.</div><div><br></div><div>In Java,</div><div><ul><li><span style="font-weight: bold;">Methods</span> horen bij object of class (niet zuiver first class)</li><li><span style="font-weight: bold;">Functional interface </span>implementaties zijn zelfstandig.</li><li><span style="font-weight: bold;">Lambda's</span> impliciete implementaties functional interfaces zonder naam.</li></ul><div><br></div></div><h3>Higher order functions</h3><div>Er is sprake van een higher order function als,</div><div><ul><li>Het een functie binnenkrijgt als argument,</li><li>Het een functie teruggeeft als waarde,</li><li>of allebei.</li></ul><div><code>Map()</code>&nbsp;geeft een functie mee die een element transformeerd.</div></div><div><code>Filter()</code>&nbsp;geet een predicate mee die elementen selecteert&nbsp;</div><div><code>Reduce() / fold()</code>&nbsp;geeft een reductie-functie mee die 1 resultaat verzameld over alle elementen.</div><div><br></div><h2>Streams API</h2><div>Een stream: reeks waarden over tijd</div><div>Een manier om collection pipelines te maken met,</div><div><code>.stream()</code>&nbsp;of&nbsp;<code>.parallelStream()</code></div><div><br></div><div>Je begint bij een verzameling (stream) en voert daar 1 of meerdere acties op uit.</div><div><br></div>