<h1 style="text-align: center;">Samenvatting Examenstof Sarch</h1><div><span style="color: rgb(0, 0, 0);"><br></span></div><div style="text-align: center;"><img src="https://miro.medium.com/v2/resize:fit:1400/1*EiPyE84OaND7JuJWd9WsWg.png" alt="The Software Architect Role: Skills, A Day in the Life, and Essential Tools  | by Matt Darapour | Medium"><br></div><h2 style="text-align: left;">What is software architecture?</h2><div>Software architecture refers to the fundamental structures of&nbsp;</div><div>a software system, and the decipline creating such structures an systems.</div><div><br></div><div>Software architecture is about making fundamental structural</div><div>choises that are costly to change ones implemented.</div><div><br></div><h2>Architecture activities</h2><div>These activities are performed iterativly and at different stages.</div><div><span style="background-color: var(--background); color: var(--editor-text); font-weight: bold;"><br></span></div><h3><span style="background-color: var(--background); color: var(--editor-text); font-weight: bold;">Architectural analysis&nbsp;</span></h3><div><span style="background-color: var(--background); color: var(--editor-text);">is the process of understanding the environment in which a proposed system will operate and determining the requirements for the system.</span></div><div><span style="background-color: var(--background); color: var(--editor-text);"><br></span></div><div><span style="background-color: var(--background); color: var(--editor-text);">Input: Requirements</span></div><div><span style="background-color: var(--background); color: var(--editor-text);"><span style="font-weight: bold;">Functional requirements</span>:&nbsp;</span></div><div><ul><li><span style="background-color: var(--background); color: var(--editor-text);">What the system will do when it's operational.</span></li></ul><span style="font-weight: bold;"><span style="background-color: var(--background); color: var(--editor-text);">Non functional rewuirements (Quality requirements):&nbsp;</span></span></div><div><ul><li><span style="background-color: var(--background); color: var(--editor-text);">Runtime based, such as reliability, operability, performance efficiency and security.</span></li><li><span style="background-color: var(--background); color: var(--editor-text);">Develpment time base, such as maintainability and transferability.</span></li></ul><div><span style="font-weight: bold;">Architectural concerns:</span></div></div><div>Business requirements and envirenmental contexts of a system that may change over time such as legal, social, financial, competitive and technologyy concerns.</div><div><br></div><div>Output: Architectural significant requirements</div><div>Those requirements that have a measurable impact&nbsp;</div><div>on a&nbsp;<span style="background-color: var(--background); color: var(--editor-text);">software systems architecture</span></div><div><span style="background-color: var(--background); color: var(--editor-text); font-weight: bold;"><br></span></div><h3><span style="background-color: var(--background); color: var(--editor-text); font-weight: bold;">Architectural synthesis&nbsp;</span></h3><div><span style="background-color: var(--background); color: var(--editor-text);">Or design is the process of creating an architecture. based on the arcgitecturally significant requirements determind by the analysis.</span></div><div><span style="background-color: var(--background); color: var(--editor-text);"><br></span></div><div><ol><li><span style="background-color: var(--background); color: var(--editor-text);">Collect information about the architecturally significant requirements.</span></li><li><span style="background-color: var(--background); color: var(--editor-text);">Find and analyse alternative solutions.</span></li><li><span style="background-color: var(--background); color: var(--editor-text);">Create a solution and take architectural decisions</span></li><li><span style="background-color: var(--background); color: var(--editor-text);">Record and communicate solutions via diagrams and or textual explenations</span></li></ol></div><div><span style="background-color: var(--background); color: var(--editor-text);">Tactics to achieve maintainability</span></div><div><ol><li><span style="background-color: var(--background); color: var(--editor-text);">Increase cohesion&nbsp;</span></li><li><span style="background-color: var(--background); color: var(--editor-text);">decrease coupling&nbsp;</span></li><li><span style="background-color: var(--background); color: var(--editor-text);">Reduce size of a module</span></li><li><span style="background-color: var(--background); color: var(--editor-text);">Defer binding</span></li></ol></div><div><ul><li><span style="font-weight: bold;">Architecture evaluation </span>is the process of determining how well the current design or a portion of it satisfies the requirements derived during analysis.</li><li><span style="font-weight: bold;">Architecture evolution </span>is the process of maintaining and adapting an existing software architecture to meet changes in requirements and environment.</li></ul><div><br></div><h2>The role of an architect in projects</h2></div><div>Analysis &amp; design&nbsp;</div><div><ul><li>Identify achitectural significant requirements</li><li>Architecture notebook</li><li>Prototype</li></ul><div>Communicate with project manager</div></div><div><ul><li>Risks</li><li>Work devision</li></ul><div>Communicate with Analists and stakeholders</div></div><div><ul><li>Shared vision&nbsp;</li><li>Requirements&nbsp;</li></ul><div>Communicate with developers</div></div><div><ul><li>Guidelines&nbsp;</li><li>Prototypes</li><li>Implementation problems</li></ul><div><br></div></div><h2>ISO 25010&nbsp;</h2><div>Beschrijft kwaliteitskenmerken van software.</div><div>Het model van productkwaliteit beschrijft 8 hoofdcategorieen</div><div><ol><li>Functional suitablility&nbsp;</li><li>Performance efficiency&nbsp;</li><li>Compatibility</li><li>Usability</li><li>Reliability&nbsp;</li><li>Security</li><li>Maintainability</li><li>Portability</li></ol><div>Maintainability heeft 5 subcategorieen.</div></div><div><ol><li>Modularity&nbsp;</li><li>Reusability&nbsp;</li><li>Analysability&nbsp;</li><li>Modifiability</li><li>Testability&nbsp;</li></ol><div><br></div><h2>Why is the ISO 25010 important for a software developer?</h2></div><div><span style="background-color: var(--background); color: var(--editor-text);">It provides a language internationally accepted.</span></div><div><br><span style="background-color: var(--background); color: var(--editor-text);">Use it as a checklist regarding non functional requirements&nbsp;</span></div><div><ul><li><span style="background-color: var(--background); color: var(--editor-text);">To descuss with your customer or boss what is important?&nbsp;</span></li><li><span style="background-color: var(--background); color: var(--editor-text);">Clients may need help describing their non functional requirements.</span></li></ul><span style="background-color: var(--background); color: var(--editor-text);">Align expectations</span><br></div><div><ul><li><span style="background-color: var(--background); color: var(--editor-text);">Your quality focus may mismatch with the clients priority, or&nbsp;</span></li><li><span style="background-color: var(--background); color: var(--editor-text);">Your quality focus may mismatch with that of your boss.</span></li><li><span style="background-color: var(--background); color: var(--editor-text);">Some quality requirements cost additional work, time means money</span></li></ul><div>Standerdized terminolegy may help you to find solutions</div></div><div><ul><li>Which measures help to adress requirements.</li><li>Which measures have a negative impact on the requirements.</li></ul><div><br></div></div><div><br></div><h2>Physical components</h2><div>Characteristics of a component</div><div><ol><li>Is an autonomous unit within a system.</li><li>Specifies a formal contract of the services that is provides.</li><li>Hides (encapsulates) it's internals.</li><li>Can be reused.</li><li>Can be replaced.</li></ol><div>Characteristics of a physical component</div></div><div><ol><li>Contains a coherent set of services. <span style="font-weight: bold;">(high in cohesion)</span></li><li>Accessible only through a facade/interface. <span style="font-weight: bold;">(Louse coupling)</span></li></ol><div><span style="font-weight: 700;"><br></span></div><h2><span style="font-weight: 700;">Cohesion at different levels</span></h2><div>First decenia&nbsp;</div></div><div>Linear programs&nbsp;</div><div><br></div><div>70's&nbsp;</div><div>Locally reusable functions</div><div><br></div><div>90's&nbsp;</div><div>Object oriented programming</div><div><br></div><div>95</div><div>Object oriented programming but&nbsp;</div><div>grouping related classes inside components<br></div><div><br></div><div><br></div><div><div class="linked-note-container" id="n-590" contenteditable="false"><i class="fa-regular fa-file-lines"></i><span textcontent="Compliant engineering" class="linked-note-name">Compliant engineering</span><i class="fa-solid fa-paperclip"></i></div><br></div>