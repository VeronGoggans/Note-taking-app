<h2>Architecture compliant engineering</h2><div>Architecture compliant engineering:</div><div>Development of a system in line with its intended architecture.</div><div><br></div><div>System developers in the roles of software architect and software engineer</div><div>are both responsible for an effective process.</div><div><br></div><div><img src="https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcTq7xt8tZ_edcK9SNhRv2ScVaNy1GMwg9n8_huMR7Cn39OZHgkga1qOYiEo8dL3UZmsHyU&amp;usqp=CAU" alt="Free Engineer Illustrations to customize | Storyset"><br></div><div><br></div><div><h2>Architecture compliant engineering Responsibilities</h2></div><div><br></div><div><span style="font-weight: bold;">Architect</span></div><div>- Draw up the architecture in cooperation with the engineers.</div><div><ul><li>Review&nbsp;</li><li>Proof of concept</li></ul><div>- Document the architecture sufficiently</div></div><div>- Present and explain the architecture</div><div>- Support engineers during the implementation</div><div>- Check the comformance of the implementation</div><div>- Adjust the architecture and the documentation</div><div><ul><li>Based on feedback of the software engineers</li></ul><div><br></div><div><span style="font-weight: bold;">Software engineer</span></div></div><div>- Provide feedback on the intended architecture</div><div><ul><li>Report problems, exceptions, alternatives</li></ul><div>- Engineer conform the architecture</div></div><div><ul><li>Read the architecture documentation</li><li>Understand the main requirements and solutions</li><li>Understand the responsibilities of the different modules&nbsp;</li><li>Understand the architectural rules</li><li>Implement inline with the architecture (use design patterns)</li></ul><div><br></div><h2>Software engineer: Engineer comform the architecture</h2></div><div><br></div><div>- Understand the main requirements and solutions.</div><div><ul><li>Functional and non-functional requirements</li></ul><div>- Understand the responsibilities of the different modules.</div></div><div><ul><li>Horizontal: functional components, subsystems</li><li>Vertical: layers, hierarchical structures</li><li>Cross-cutting concerns/aspects: security, logging, communication</li></ul><div><br></div></div><div>Undertsand the architectural rules.</div><div><ul><li>Intnetion: What quality requirements does a rule address?</li><li>In which situations is the rule relevant?</li><li>How can the tule be obeyed?</li><li>How can the rule be violated?</li></ul><div><br></div></div><h2>Design patterns: Facade</h2><div>An facade is an object that serves as a front-facing interface masking more complex underlying or structural code&nbsp;</div><div><img src="https://refactoring.guru/images/patterns/content/facade/facade-3x.png" alt="Facade"><br></div><div><a href="https://www.google.com/search?sca_esv=e7dc9a935a8113af&amp;sca_upv=1&amp;rlz=1C1CHBD_nlNL1020NL1020&amp;sxsrf=ADLYWIKloPsrMW1-q22XDIDLDnbviQ25ug:1715677472209&amp;q=software+architecture+facade&amp;uds=ADvngMiH6OrNXu9iaW3w8S94r9G4_XL1qJI_wNbAoCkuhNB_UrwhVWIx190pAdNXdoGgl162T6zDdGCvr-8rXTmRiPwlNo-g0LRIzLbyKaQ7BkhxhYXrYQUq6PnPFAMpSSmTVHmC7khohaws_sTGKECsrSsnfg-7asTLgyyaXQu8Xe_PWggTstSufGsB-TyKHUzIOFV0DKNaf0f44RgV3q8zsC5Iih-fOkUJFY1Fn4Gs-561k6JunPEKVTUtEodeR4hlnvLUyc7nLE5NdPCissbyHdZhGRNJWw&amp;udm=2&amp;prmd=ivnbz&amp;sa=X&amp;ved=2ahUKEwiEwp7S5IyGAxUBwAIHHZkyD-kQtKgLegQIDRAB&amp;biw=1536&amp;bih=695&amp;dpr=1.25#vhid=P4wX-VOFL65VXM&amp;vssid=mosaic">Other Facade image example</a><br></div><div><br></div><div><br></div><div><h2>Design patterns: Singleton</h2></div><div><br></div><div>Restricts the instantiation of a class to one <span style="font-weight: bold;">single </span>instance.</div><div>This is useful when exactly one object is needed to coordinate actions across the system&nbsp;</div><div><img src="https://rezababakhani.s3.ir-thr-at1.arvanstorage.com/articles/04efebc5d759417fa6fc0a91427f4375.png?v=feb57ff7af99466ea99dd2433a84028f" alt="Reza Babakhani | Introducing the Singleton design pattern"><br></div><div><br></div><div><div><h2>Design patterns: Data transfer object</h2></div><div><br></div><div>A data transfer object (DTO) is an object that carries data between processes&nbsp;</div><div><ul><li>DTO's are simple objects that don't contain any business logic</li></ul><div>Usefull</div></div><div><ul><li>Performance: in case of remote interfaces where each call is a expensive operation</li><li>Decoupling in case of components</li></ul><div><img src="https://www.okta.com/sites/default/files/styles/tinypng/public/media/image/2021-11/dtoSketch.gif?itok=TVcsZsML" alt="Data Transfer Object DTO: definitie en gebruik | Okta"><br></div></div><div><h2>Design patterns: Adapter</h2></div><div><br></div><div><div><span style="font-weight: bold;">Problem</span>: How to resolve incompatible interfaces, or provide a</div><div>stable interface to similar components with different interfaces?</div><div><br></div><div><span style="font-weight: bold;">Solution</span>: Convert the original interface of a component into</div><div>another interface, through an intermediate adapter object.</div></div><div><br></div><div><div>The adapter:</div><div>- Abstracts/wraps the Adaptee</div><div>- Decouples the clients from the</div><div>Adaptee</div><div><ul><li>The Adaptee may change it's interface</li><li>The Adaptee may be replaced</li></ul><div><br></div><h2>Layers: principles</h2></div></div></div><div><br></div><div><div>A layered architecture is a division of a software</div><div>system in layers, where each layer contains a</div><div>certain type of software, while <span style="font-weight: bold;">rules </span>regulate the</div><div>communication between the layers.</div></div><div><br></div><div><span style="font-weight: bold;">Rules</span></div><div>- Back call ban&nbsp;</div><div><ul><li>Dependencies are only allowed from a higher to a lower layer</li><li>Notify-messages from a lower to a higher layer (Obeserver, publish-subscribe)</li></ul><div>- SKip call ban</div></div><div><ul><li>Communication can only happen between two adjacent layers</li><li>No layer may be skipped</li></ul><div><br></div></div><div><div><h2>Layers: implementation level&nbsp;</h2></div><div><br></div></div><div><div><span style="font-weight: bold;">Design Patterns</span></div><div>- Adapter; for a layer with infrastructure abstraction logic</div><div><ul><li>Each infrastructural element may be wrapped by an adapter.</li></ul></div><div>- Note: Some authors advice to give each layer an interface.</div><div>&nbsp; However, layers donâ€™t have interfaces.</div><div>&nbsp; A component within a layer may provide an interface.</div><div><br></div><div><span style="font-weight: bold;">Architectural Compliance</span></div><div>- Create packages for relevant architectural modules, like layers, at</div><div>&nbsp; code level.</div><div>- Check rules: back call ban, skip call ban</div><div>- Check if library-usage is in line with the responsibility of a layer</div><div><ul><li>UI-libraries only used by the Presentation layer: Swing, JSF, Jason, ...</li><li>Database-related libraries only used by Infrastructure abstraction layer</li></ul><div><br></div></div></div><h2>Components: principles</h2><div><br></div><div><span style="font-weight: bold;">Encapsulation / high cohesion</span></div><div>- One component contains a single area of compentence</div><div>- A class can&nbsp;<span style="background-color: var(--background); color: var(--editor-text);">only</span><span style="background-color: var(--background); color: var(--editor-text);">&nbsp;belong to one&nbsp;</span><span style="color: var(--editor-text); background-color: var(--background);">component&nbsp;</span></div><div><span style="color: var(--editor-text); background-color: var(--background);"><br></span></div><div><span style="color: var(--editor-text); background-color: var(--background); font-weight: bold;">Implementation hiding / low coupling</span></div><div><span style="color: var(--editor-text); background-color: var(--background);">- Define a clear interface for each component&nbsp;</span></div><div><span style="background-color: var(--background);"><div style=""><ul><li>Hide the data and methods of the internal classes behind the interface</li></ul></div><div style="">- Implement and use the interface correctly</div><div style=""><ul><li>Dependencies of clients only on the interface</li></ul></div><div style="">- The interface does not implement the services; it forwards them</div></span></div><div><br></div><div><h2>Components: implementation level</h2></div><div><br></div><div><span style="font-weight: bold;">Pattern usage</span></div><div><span style="background-color: var(--background); color: var(--editor-text);">- Facade -&gt; create service providing class(es)</span></div><div><span style="background-color: var(--background); color: var(--editor-text);">- DTO -&gt; service methods return DTO's</span></div><div><ul><li><span style="background-color: var(--background); color: var(--editor-text);">Object that carries data between components or processes</span></li><li><span style="background-color: var(--background); color: var(--editor-text);">Decouples: no usage of internal classes of the component</span></li></ul><div>- Singleton is used to access the facade</div></div><div><ul><li>Simple solution: good for small projects</li><li>Large applications may require proxy, broker and or service bus</li></ul><div><div>Architectural Compliance</div><div>- Create packages for relevant architectural modules, like components,</div><div>&nbsp; at code level.</div><div>- Check rules: facade convention</div></div></div><div><br></div><div><br></div>
<div class="linked-note-container" id="n-589"><i class="fa-regular fa-file-lines"></i>
    <span class="linked-note-name" contenteditable="false">Compliance checking</span>
    <i class="fa-solid fa-paperclip"></i>
  </div>