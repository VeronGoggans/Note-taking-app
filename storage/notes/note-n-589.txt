<h2>Intended architecture versus implemented architecture</h2><div>Two versions of a software architecture exist...</div><div>A systems&nbsp;<span style="font-weight: bold;">intended architecture</span>&nbsp;captures the design desicions&nbsp;</div><div>made prior to the systems construction.</div><div><ul><li>It is the planned architecture, as designed</li></ul><div>A systems&nbsp;<span style="font-weight: bold;">implemented architecture&nbsp;</span>describes how the system</div></div><div>had been built.</div><div><ul><li>Is the actual architecture, as realized</li></ul><h2>Architecture erosion</h2></div><div>Architecture erosion refers to the gap observed between&nbsp;</div><div>the planned architecture and actual architecture of a software system as&nbsp;</div><div>realized in it's implementation.</div><div><br></div><div>Software architecture erosion occurs when implementation&nbsp;</div><div>decisions either do not fully achieve the architecture as planned&nbsp;</div><div>or otherwise violate constraints or principles of that architecture.</div><div><br></div><div>This happend because of...</div><div><ol><li>Developer sloppiness</li><li>Perception of short deadlines which prevent thinking through and documenting</li><li>Lack of documented intended architecture</li><li>Need or desire for code optimisation</li><li>Innadequate techniques</li></ol></div><h2>Software Architecture Compliance Checking (SACC)</h2><div>SACC is an approach to bridge the gap between high level modules of&nbsp;</div><div>architectural design and the implemented program code, and to prevent architectural ersosion.</div><div><br></div><div>- Bridge the gap between inteded and implemented architecture</div><div>- Check the rules in the implementation artefacts</div><div><ul><li>Best done iteratively&nbsp;</li></ul><div>- Analyse violations: Why?</div></div><div>- Afterwards: Find solutions</div><div><ul><li>Improve the implementation&nbsp;</li><li>Improve the architecture</li></ul><div>Architecture compliance is...</div></div><div>A measure to which degree the implemented architecture in the source code&nbsp;</div><div>conforms to the planned software architecture.</div><div><span style="background-color: var(--background); color: var(--editor-text);"><br></span></div><div><span style="background-color: var(--background); color: var(--editor-text);"><br></span></div><div><span style="background-color: var(--background); color: var(--editor-text);">SACC process&nbsp;</span></div><div><span style="background-color: var(--background); color: var(--editor-text);">- Define the intended architecture: modules and rules.</span><br><span style="background-color: var(--background); color: var(--editor-text);">- FInd the source code units implementing the modules.&nbsp;</span><br><span style="background-color: var(--background); color: var(--editor-text);">- Check the rules</span><br></div><div><ul><li><span style="background-color: var(--background); color: var(--editor-text);">Analyse the code&nbsp;</span></li><li><span style="background-color: var(--background); color: var(--editor-text);">Check the compliance with the rules</span></li><li><span style="background-color: var(--background); color: var(--editor-text);">Report violations against the intended achitecture</span></li></ul><h2>Symantically Rich Modular Architecture (SRMA)</h2></div><div>A SRMA includes modules of semantically different types,&nbsp;</div><div>while a veriety of types of rules may constrain the module.</div><div><br></div><div>Many software architecture's in literature and practice are SRMA's,</div><div>but are not always documented that way.</div><div><ul><li>One of the reasons: UML doesn't have an icon for a layer.</li></ul><div><span style="font-weight: bold;">Common modules types.</span></div></div><div><ul><li>Subsystem&nbsp;</li><li>Layer</li><li>Component</li><li>Interface</li><li>External system</li></ul><div><span style="font-weight: bold;">Commen rule types.</span></div></div><div>- Component</div><div><ul><li>Facade convention</li></ul><div>- Layer&nbsp;</div></div><div><ul><li>Back call ban&nbsp;</li><li>Skip call ban</li></ul><div>- Responsibility limitations.</div></div><div><ul><li>Is not allowed to use&nbsp;</li><li>Is only allowed to use&nbsp;</li><li>Is the only module allowed to use</li><li>Is allowed to use</li></ul><div><br></div></div><div><br></div>