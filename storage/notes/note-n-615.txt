<div style="text-align: left;"><span>Veel ideeën van Extreme Programming zijn terug te vinden</span><br></div><div><div>in moderne Agile ontwikkelmethoden, waaronder:</div><div><ul><li>Korte feedback loops</li><li>Kleine, incrementele veranderingen</li><li>Flexibel plannen van implementaties&nbsp;reageren op veranderingen</li><li>Testen door developer, klant en tester&nbsp;grip op het ontwikkelproces, vroegtijdig bugs opsporen</li><li>Naaste samenwerking van betrokken, getalenteerde personen</li></ul><h2>Continuous Delivery (CD)</h2></div></div><div>Er moet een process zijn waarbinnen software altijd&nbsp;</div><div>in een deploybare staat is.</div><div><br></div><div>Bijvoorbeeld door met kleine commits te werken</div><div>en een geschikte branch strategy in te zetten.&nbsp;</div><div><br></div><div>Checkout, Compile, Test, Deploy</div><div><br></div><h2>Continuous Deployment</h2><div>Bij een groot vertrouwen in het team en het process,&nbsp;</div><div>kan zelfs de deployment geautomatiseerd worden.&nbsp;</div><div><ul><li>Kan leiden tot meerdere kleine deployments per dag.</li></ul><div>Checkout, Compile, Test, Deploy<br></div></div><div><br></div><div><br></div><h3>Versioning van release</h3><div>Een oplossing is <span style="font-weight: bold;">semantic versioning.&nbsp;</span></div><div><ul><li>Betekenisvolle versienummers.</li></ul><div>Semantic versioning hanteert het shema MAJOR, MINOR, PATCH</div></div><div><ul><li>Bijvoorbeeld 1.5.3: Major update1, Minor update 5, A patch 3</li></ul><div><br></div></div><h3>Deprecation</h3><div><div><span style="font-size: 14.6667px;">Een extra oplossing is deprecation</span></div><div><ul><li><span style="font-size: 14.6667px;">ontmoediging</span></li></ul></div><div><span style="font-size: 14.6667px;"><br></span></div><div><span style="font-size: 14.6667px;">Voordat je in je release backwards incompatible changes doet (major</span></div><div><span style="font-size: 14.6667px;">release), geef je downstream gebruikers de kans om te upgraden:</span></div><div><ol><li><span style="font-size: 14.6667px;">nieuwe functionaliteit toevoegen</span></li><li><span style="font-size: 14.6667px;">oude functionaliteit behouden, maar aanmerken als deprecated</span></li><li><span style="font-size: 14.6667px;">aankondigen via deprecation warning in je documentatie, code en logs</span></li></ol><div><br></div></div></div><h3>Deployment strategies</h3><div>We wilen high availability en reliability</div><div><ul><li>Stateless applications&nbsp;</li><li>Logica in applicatie, opslag elders.</li></ul><div>Als je applicaties stateless zijn, kan je ze meervoudig&nbsp;</div></div><div>uitrollen en achter een load balancer zetten.&nbsp;</div><div><ul><li>Meerdere nodes.</li><li>Load balancer verdeelt traffic over de nodes.</li></ul><div>Dit brengt mogelijkheden mee voor <span style="font-weight: bold;">zero downtime deployments</span></div></div><div><span style="font-weight: bold;"><br></span></div><div><span style="font-weight: bold;"><br></span></div><div><span style="font-weight: bold;">Recreation </span>(big bang)</div><div><ul><li>Versie 1 uitzetten.</li><li>Versie 2 deployen.</li></ul><div>Voordelen</div></div><div><ul><li>Simpel en immutable&nbsp;</li></ul></div><div>Nadelen</div><div><ul><li>Downtime</li></ul><div><br></div></div><div><span style="font-weight: bold;">Ramp-up</span> (rolling update)</div><div><ul><li>Versie 2 geleidelijk per node uitrollen en versie 1 laten vervangen.&nbsp;</li></ul><div>Voordelen</div></div><div><ul><li>Eenvoudig, zero downtime</li></ul><div>Nadelen&nbsp;</div></div><div><ul><li>Rollout/rollback kost tijd.</li><li>Lastig met verschillende API's.</li><li>Mogelijk versie conflict.</li><li>Geen controle over traffic.</li></ul><div><img src="https://semaphoreci.com/wp-content/uploads/2020/08/server2.png" alt="What Is Canary Deployment? - Semaphore"><br></div><div><br></div><div><span style="font-weight: bold;">Blue/Green</span></div></div><div><ul><li>Versie 2 naast versie 1 draaien, testen of versie 2 voldoet en&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; dan verkeer overschakelen naar versie 2&nbsp;</li></ul><div>Voordelen</div></div><div><ul><li>Zero downtime</li><li>Snelle rollout/rollback</li></ul><div>Nadelen</div></div><div><ul><li>Dubbel resource gebruik</li><li>Testen moet plaatsvinden voor release</li><li>Omgaan met state</li></ul><div><img src="https://hackernoon.imgix.net/images/ogLjQOI8STUK2kIzi4UX9fhl1za2-zb93z2r.jpeg?w=1200&amp;q=75&amp;auto=format" alt="Implementing Blue-Green Deployment with PaaS: Minimizing Downtime and Risk  | HackerNoon"><br></div><div><br></div></div><div><span style="font-weight: bold;">Canary</span></div><div><ul><li>Versie 2 tegelijkertijd met versie 1 draaien, geleidelijk aan traffic van 1 naar 2 overzetten.</li></ul><div>Voordelen</div></div><div><ul><li>Beheersing over releases&nbsp;</li><li>Goed voor monitoring&nbsp;</li><li>Snelle rollback</li></ul><div>Nadelen</div></div><div><ul><li>Langzame rollout</li></ul><div><img src="https://www.w6d.io/blog/wp-content/uploads/sites/2/2021/08/canary.png" alt="Canary Release vs Blue-Green Deployments | WildBlog"><br></div></div><div><h2>Observability</h2><div>Logs</div><div><ul><li>Bijhouden wat er op welk moment tijdens de uitvoering van een&nbsp;applicatie gebeurt</li></ul></div><div><br></div><div>Metrics</div><div><ul><li>Continue statistieken over de uitvoering van een applicatie</li></ul></div><div><br></div><div>Tracing</div><div><ul><li>Impliciet in kaart brengen welke delen van het systeem geraakt&nbsp;worden bij de uitvoering van requests</li></ul><div><br></div></div></div><div><h3>Observability: Logging</h3></div><div><div><ul><li>Developers schrijven in code dat er iets noemenswaardig is gebeurd</li><li>Op te slaan in een log bestand of log service</li><li>Niet elke logregel is even interessant</li><li>Op productie wil je minder loggen (kost performance) dan in development&nbsp;of wanneer je aan het debuggen bent</li><li>Daarom log levels (gradaties)</li><li>Configureerbaar in je applicatie</li></ul><div><br></div></div></div><div>TRACE: Een stuk code word uitgevoerd.</div><div>DEBUG: Handig voor bij het debuggen.</div><div>INFO: Informerend bericht.</div><div>WARN: Gevaarlijke situatie.</div><div>ERROR: Foutmelding.</div><div>FATAL: Zware problemen die de applicatie om zeep kunnen helpen.&nbsp;</div><div><br></div><div><h3>Observability: Metrics</h3></div><div><br></div><div><div>Metrics geven informatie over de staat van je</div><div>applicatie, bijvoorbeeld:</div><div><ul><li>Hardware utilization (disk, memory, cpu)</li><li>Throughput (requests per second)</li><li>Load (average response time)</li></ul></div><div><br></div><div>Kan ook specifiek voor je applicatie zijn,</div><div>bijvoorbeeld:</div><div><ul><li>aantal nieuwe bezoekers per dag</li><li>gebruiksduur applicatie</li></ul></div></div><div><br></div><div><h3>Observability: Tracing</h3></div><div>Welke executiepaden worden tijdens een request doorloopen?</div><div><ul><li>Handig om het systeem beter te bergijpen</li><li>Welk onderdeel van de code kost de meeste resources.&nbsp;</li></ul><div><h2>DevOps</h2><div><img src="https://community.aws/raw-post-images/concepts/what-is-devops/images/devops.jpeg" alt="Community | What is DevOps?"><br></div><div>Om continu kwaliteit op te kunnen leveren, is het zaak dat</div><div>developers en operations samenwerken</div><div><ul><li>Dit vereist automatisering continuous delivery</li><li>Dit vereist organisatie agile methodes</li></ul></div><div><br></div><div>Geen officiële definitie:</div><div><ul><li>“a set of practices intended to reduce the time between committing a change to a system and the change being placed into normal production, while ensuring high quality”</li></ul></div></div></div><h2>Docker</h2><div><img src="https://blog.codewithdan.com/wp-content/uploads/2023/06/Docker-Logo.png" alt="Docker for Developers: Understanding the Core Concepts – Code with Dan Blog"><br></div><div><div>Docker verpakt een applicatie en zijn afhankelijkheden in een container</div><div>dat op Linux kan draaien</div><div><ul><li>Het kan dus ook draaien op een VM waar linux opdraait</li></ul></div><div><br></div><div>In een Dockerfile kan je de stappen beschrijven om de container op te</div><div>bouwen:</div><div><ul><li>op welke base image moet de container gebaseerd zijn</li><li>welke connecties moet het hebben (filesystem, network, andere containers)</li></ul></div><div><br></div><div>Van een Dockerfile kan je vervolgens een image maken: een immutable</div><div>snapshot die je als container kan draaien</div><div><ul><li>op welke omgeving dan ook!</li></ul></div></div>