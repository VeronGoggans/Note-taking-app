<div><br></div><h2><span>Wat is Software Architecture? (SA)</span><br></h2><div><span>Software architecture refereerd naar de fundamentale structure van een software systeem.&nbsp;</span><br></div><div><br></div><div><span style="font-weight: bold;">Structure</span></div><div>Software element +&nbsp;</div><div>Relations tusssen de elements +&nbsp;</div><div>Properties van beide elements and relations.</div><div><br></div><div><span style="font-weight: bold;">It functions as a blueprint</span></div><div>Voor het systeem en het te develope project.</div><div><br></div><div>Software architecture gaat om het maken van fundamentale beslissingen, die kostig zijn om te verandere als ze geimplementeerd zijn.</div><h2>Products of software architecture</h2><div>OOAD products</div><div><ol><li>Non functional requirements</li><li>Functional requirements</li><li>Domain class model</li></ol><div>Software architecture products</div><ol><li>Component model&nbsp;</li><li>Layer model</li><li>Deployment model</li><li>Key scenarios</li><li>Architectural goals</li><li>Decisions and justification&nbsp;</li></ol><div>Arhitectural products zouden moeten uitleggen hoe de requirements gerealiseerd kunnen worden.</div></div><h2>Architecture Notebook: Contents</h2><div><span style="background-color: var(--background); color: var(--editor-text); font-size: 11pt;">- Architectural goals</span><br><span style="background-color: var(--background); color: var(--editor-text); font-size: 11pt;">- Architectural significant requirements</span></div><div><ol><li>Non functional requirements</li><li>Functional requirements</li></ol><span style="background-color: var(--background); color: var(--editor-text); font-size: 11pt;">- Decisions and justification</span></div><div><span style="background-color: var(--background); color: var(--editor-text); font-size: 11pt;">- Key abstractions/Domain model</span></div><div>- Software partitioning</div><div><ol><li>Logical component model</li><li>Layers model&nbsp;</li><li>Physical component &amp; layers</li></ol><div>- Deployment model</div></div><h2>Architectural significant requirements</h2><div>Requirements die een grote invloed hebben op de architecture van het software systeem.</div><div><br></div><div><span style="font-weight: bold;">Functional requirements</span></div><div>Describe the desired functionality (The what)</div><div><br></div><div><span style="font-weight: bold;">Non functional requirements</span></div><div>Limit the possible solutions (The how)</div><h2>Architectural Goals</h2><div>Architectural goals geven de motivatie achter de genomen beslissingen</div><div>Deze goals zijn vaak gedreven door de requirements</div><div><br></div><div>Architectural goals hanteren de volgende dingen.</div><div><ul><li><span style="background-color: var(--background); color: var(--editor-text); font-size: 11pt;">Wat is de verwachte levensduur van een systeem?</span></li><li><span style="background-color: var(--background); color: var(--editor-text); font-size: 11pt;">Will the system need to respond to technological changes over that time?</span></li><li><span style="background-color: var(--background); color: var(--editor-text); font-size: 11pt;">How frequently is the system expected to adapt to change?</span></li><li><span style="background-color: var(--background); color: var(--editor-text); font-size: 11pt;">What changes can we anticipate in the future, and how can we make them easier to accomandate?</span></li></ul><h2>Decision and Justification</h2></div><div>Verzamel belangrijke beslissingen over de achitecure voor toekomstige referentie.</div><div>Zorg ervoor dat de team de achitecture snapt en hem kan realiseren.&nbsp;</div><h2>Key abstractions/Domain model</h2><div>Identify the key concepts and abstractions that the system needs to handle.</div><div>The requirements are a good source for abstraction.</div><h2>Software partitioning</h2><div><span style="font-weight: bold;">Partitioning a system</span>&nbsp;kan helpen om de complexiteit er van onder controle te houden door gebruik van het&nbsp;<span style="font-weight: bold;">devide and conquer</span> strategy. (Seperation of concerns and Single responsability principle)</div><div><br></div><div>Het opsplitsen van het systeem in kleine stukjes (modules) maakt development makkelijker.</div><div><br></div><div><span style="font-weight: bold;">Modules with specific semantics</span></div><div><span style="font-weight: bold;">Layers</span>&nbsp;are hierarchical partitions of the functionality of a system with certain rules regarding how relationships can be helt between them.&nbsp;</div><div><br></div><div><span style="font-weight: bold;">Components </span>provide a way to isolate specific sets of functionality within units that can be distributed and installed seperately from other functionality.</div><h2>4+n perspective</h2><div>Different ways of lookin at a system.</div><div><ol><li>Process view&nbsp;</li><li>Development view</li><li>Logical view&nbsp;</li><li>Physical view</li></ol><h3>Process view</h3></div><div>Process view describes the sequence of events that perform a scenario.</div><div>In software architecture, process is described with <span style="font-weight: bold;">text, activity</span> or a <span style="font-weight: bold;">sequence diagram</span>.</div><div><br></div><div><span style="font-weight: bold;">Activity diagram</span>: what hapens in what order.</div><div><span style="font-weight: bold;">Sequence diagram</span>: Who does what in what order.&nbsp;</div><div><br></div><h3>Development view</h3><div>Development view describes the inner structure of the system. It describes the components that are implemented.&nbsp;</div><div><br></div><div>In software architecture inner structure is described with&nbsp;</div><div><span style="font-weight: bold;">package </span>and <span style="font-weight: bold;">component </span>diagrams.</div><div><br></div><div><span style="font-weight: bold;">Package diagram</span>: Component grouped with their dependencies.&nbsp;</div><div><span style="font-weight: bold;">Component diagram</span>: Components and how they are connected.&nbsp;</div><div><br></div><h3>Logical view</h3><div>Logical view descibes the functionality that each component provides.</div><div><br></div><div>In software architecture, functionality of components is described with class diagrams.</div><div><br></div><div><span style="font-weight: bold;">Class diagram</span>: methods, data and relations with other classes.</div><div><br></div><h3>Physical view&nbsp;</h3><div>Physical view describes the relation of the modeled system to the outside world.&nbsp;</div><div><br></div><div>Deployment is often described with a deployment diagram. It often models things containing of other things and their relations.&nbsp;</div><div><br></div><div>Deployment diagram: the scope of the system and it's interface with its container.</div><h2>Layers model</h2><div>Components may be structured with layers</div><div>Layered architecture:&nbsp;</div><div><ul><li>A division of a system in layers</li><li>Where each layer contains a certain type of software</li><li>While rules regulate the communication between them.&nbsp;</li></ul><div>Default communication Rules:</div></div><div>Back call ban: Layers can only communicate to layers under them.&nbsp;</div><div>Skip call ban: Layers are only allowed to communicate with the layer directly below them.&nbsp;<br></div>