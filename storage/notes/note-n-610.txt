<h1 style="text-align: center;"><img src="https://about.codecov.io/wp-content/uploads/2021/02/8-factors-Influencing.png" alt="8 Factors Influencing Your Approach to Code Coverage - Codecov" style="background-color: var(--background); color: var(--editor-text); font-size: 11pt;"><br></h1><div style="">Statische analyse,<br></div><div><ul><li>Analyse van software zonder deze te draaien.</li></ul><div><div><h2>Code coverage ðŸ¥­</h2><div><br></div><div>Welke&nbsp;<span style="font-weight: bold;">drie soorten coverage</span>&nbsp;kan men over het&nbsp;</div><div>algemeen onderscheiden?</div><div><span style="background-color: var(--background); color: var(--editor-text);"><br></span></div><div><span style="background-color: var(--background); color: var(--editor-text);"><br></span></div><div><span style="color: var(--editor-text); font-weight: bold;">1. Statement / line coverage</span></div><div><ul><li><span style="color: var(--editor-text);">Welke regels zijn gedekt?</span></li></ul></div><div><span style="color: var(--editor-text);"><br></span></div><div><span style="color: var(--editor-text); font-weight: bold;">2. Branch coverage&nbsp;</span></div><div><ul><li><span style="color: var(--editor-text);">Welke paden zijn gedekt?</span></li></ul></div><div><br></div><div><span style="font-weight: bold;">3. Mutation coverage</span></div><div><ul><li>Hoe betrouwbaar zijn de tests?</li><li>Implementatie word gewijzigd zodat sommige test zouden moeten falen.&nbsp;</li><li>Zo niet, dan is de test minder betrouwbaar.</li></ul></div></div><h2 style="text-align: left;">Complexity</h2><div><br></div><div><span style="font-weight: bold;">Essentiele complexity</span></div><div>Hoe moeilijk zijn de problemen en oplossingen van zichzelf</div><div><br></div><div><span style="font-weight: bold;">Accidental complexity</span></div><div>Hoe moeilijk hebben we problemen en oplossingen gemaakt</div><div><ul><li>Bijvoorbeeld door architecturelen beslissingen, onderhoudbaarheid en of code style.</li></ul><div><br></div></div><h3>McGabe's Cyclomatic complexity (1976)</h3><div>Bereken de complexitied als volgt&nbsp;</div><div>formule:<span style="font-style: italic;">&nbsp;cc = edges - nodes + 2&nbsp;<span style="vertical-align: super;">2&nbsp;</span>Components</span></div><div><span style="background-color: var(--background); color: var(--editor-text); font-size: 11pt;">Lager is beter!</span><span style="background-color: var(--background); color: var(--editor-text); font-size: 11pt;">&nbsp;</span></div><div><br></div><h3>NPath complexity (1988)</h3><div><div>De NPath complexity van&nbsp;<span style="background-color: var(--background); color: var(--editor-text);">een stuk code is de som</span></div><div>van de hoeveelheid paden&nbsp;<span style="background-color: var(--background); color: var(--editor-text);">die je af kan leggen tussen</span></div><div>startpunt en eindpunt. Lager is beter !</div></div><div><br></div><div>Deze complexiteid groeit exponentieel.</div><div><br></div><div>2 If statements is 4 paden&nbsp;</div><div>3 If statements is 8 paden.</div><div><br></div><h3>Sonarâ€™s Cognitive Complexity (2016)</h3><div><div>Ontwikkeld door SonarSource om de begrijpelijkheid van code te</div><div>meten</div><div><ul><li>Sluit aan op cyclomatic complexity</li><li>Lager is beter</li></ul></div><div><span style="font-weight: bold;">Doel</span>: realistische metric voor mentale inspanning om code te</div><div>begrijpen</div><div><ul><li>Wat vinden developers over het algemeen moeilijk om te begrijpen?</li></ul></div><div>Drie basisregels:</div><div><ol><li>Ignore shorthand: negeer structuren die meerdere statements&nbsp;<span style="background-color: var(--background); color: var(--editor-text);">samenvatten in Ã©Ã©n</span></li><li>+1 voor break in linear flow</li><li>+1 voor nested flow-break structures</li></ol><div><span style="font-weight: bold;">Ignore shorthand</span></div></div></div><div>Opbreken van code in kleiner onderdelen en het gebruik van shorthandlanguage features zouden de complexitiet niet negatief moeten beinvloeden.</div><div><br></div><h3>CRAP Index</h3><div>Change Risk Analysis and Predictions</div><div><br></div><div>Indicator voor het risico dat het veranderen van een methode (m) met zich meebrengt</div><div>gelet op:</div><div><ul><li>Line coverage: welke regels zijn gedekt?</li><li>Cyclomatic complexity: Hoeveel vertakkingen zijn er?</li></ul><div>CRAP(m) = complexity(m)&nbsp;<span style="vertical-align: super;">2</span>&nbsp;x (1- coverage(m) / 100)&nbsp;<span style="vertical-align: super;">2</span>&nbsp;3 + complexity(m)</div></div><div><br></div><div><div>Hoe minder coverage er is,</div><div>Hoe zwaarder het risico van complexiteit is</div><div><ul><li>100% coverage, CRAP = complexity(m)</li><li><span style="background-color: var(--background); color: var(--editor-text);">0% coverage, CRAP = complexity(m)2</span></li></ul></div><div>Risico verminderen: meer testen en/of meer refactoren</div></div><div><br></div><div><br></div><h3>Software architecture compliance checking&nbsp;</h3><div><span style="font-weight: bold;">Intended&nbsp;</span>architecture en&nbsp;<span style="font-weight: bold;">implemented</span>&nbsp;architecture</div><div>In hoeverre sluit de geimplementeerde architectuur aan op de bedoelde architectuur.</div><div><br></div><div><span style="font-weight: bold;">Arcitectute erosion</span></div><div>De mate waarin de geimplementeerde en bedoelde architectuur</div><div>uit elkaar lopen.</div><h2>ArchUnit&nbsp;</h2><div style="text-align: center;"><img src="https://www.archunit.org/assets/ArchUnit-Logo.png" alt="Unit test your Java architecture - ArchUnit"><br></div><div>Een soort Unit tests voor architectuur</div><div><ul><li><span style="font-weight: bold;">Gegeven&nbsp;</span>een intended architectuur.</li><li><span style="font-weight: bold;">Wanneer&nbsp;</span>ik de geimplementeerde architectuur analyseer.</li><li><span style="font-weight: bold;">Dan&nbsp;</span>verwacht ik dat deze voldoet aan de regels.</li></ul><div>Kan als plugin worden toegevoed in JUnit</div></div><div><br></div><h3>Hawthorne effect&nbsp;</h3><div>De manier hoe een persoon doet of spreekt verandert&nbsp;</div><div>door het bewustzijn van observatie.</div><div><br></div><div><span style="font-weight: bold;">Voorbeeld:</span></div><div>Werknemers veranderen hun gedrag wanneer&nbsp;</div><div>ze weten dat ze geobserveerd worden</div><div><br></div><div>Dit kan positieve effecten hebben.</div><div><ul><li>Verbeterde inzet om goed voor de dag te komen</li></ul><div>Dit kan negatieve gevolgen hebben.&nbsp;</div></div><div><ul><li>Men kan het systeem bespelen om aan de meting te voldoen, zonder dat het doel er mee behaald is.</li></ul></div><div><br></div><h3>Cobra effect</h3><div><ul><li>Britse regering bood beloning voor elke dode cobra in Delhi</li><li>Aanvankelijk succesvol, veel slangen gedood voor beloning</li><li>Mensen begonnen cobraâ€™s te fokken voor inkomen</li><li>Beloningsprogramma werd stopgezet</li><li>Cobra-fokkers lieten nu waardeloze cobraâ€™s vrij</li><li>Meer cobraâ€™s!</li><li>Goodhartâ€™s Law</li><li>When a measure becomes a target, it ceases to be a good</li><li>measure.</li></ul></div></div></div>