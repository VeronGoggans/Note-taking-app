<h1 style=""><span style="background-color: var(--editor); color: var(--editor-text); font-size: 11pt;">Wat is maintainability?</span><br></h1><div><div><ul><li>Reusability</li><li>Modularity</li><li>Testability<br></li><li>Modifiability</li><li>Anylisability</li></ul><div><span style="font-weight: bold;">Maintainability (ISO 25010)</span></div></div><div>Maintainability represents the degree of effectiveness and efficiency with which a product or system can be modified to improve it, correct it or adapt it to changes in the environment, and in requirements.</div><div><br></div><div>Reusability&nbsp;</div><div><ul><li>Onderdelen hergebruikt kunnen worden in hetzelfde of andere software</li></ul></div><div><br></div><div>Modularity</div><div><ul><li>Verandering minimale impact heeft op (andere) onderdelen</li></ul></div><div><br></div><div>Testability</div><div><ul><li>Software test opgesteld en uitgevoerd kunnen worden&nbsp;</li></ul></div><div><span style="background-color: var(--background); color: var(--editor-text);"><br></span></div><div><span style="background-color: var(--background); color: var(--editor-text);">Modifiability</span></div><div><ul><li>De software aangepast kan worden zonder fouten</li></ul></div><div><br></div><div>Anylisability</div><div><ul><li>De software te doorzien en te diagnosticeren is</li></ul></div><div><br></div><div><br></div><h2>Een goede structuur</h2><div><span style="font-weight: bold;">Seperation of concerns&nbsp;</span></div><div>Niet alles op 1 plek, maar op een logische inrichting in modules op basis van verandtwoordelijkheid en abstractienivuea&nbsp;</div><div><span style="background-color: var(--background); color: var(--editor-text);"><br></span></div><div><span style="background-color: var(--background); color: var(--editor-text); font-weight: bold;">High cohesion</span></div><div><span style="background-color: var(--background); color: var(--editor-text);">Modules en hun onderdelen werken samen aan 1 doel&nbsp;</span><span style="background-color: var(--background); color: var(--editor-text); font-weight: bold;">&nbsp;</span></div><div><span style="background-color: var(--background); color: var(--editor-text);"><br></span></div><div><span style="background-color: var(--background); color: var(--editor-text); font-weight: bold;">Loose coupling</span></div><div><span style="background-color: var(--background); color: var(--editor-text);">Modules weten niks van elkaars interne werking.&nbsp;</span></div><div><span style="background-color: var(--background); color: var(--editor-text);">Ze zijn beperkt afhankelijk van elkaar. Veranderingen in 1 module werken beperkt op andere modules.&nbsp;</span></div><div><br></div><h2>Het object model van Booch</h2><div style="text-align: center;"><img src="https://www.arothuis.nl/img/object-model.png" alt="Designing Software With the Object Model - A. Rothuis"><br></div><div><ol><li>Abstraction</li><li>Encapsulation</li><li>Modularity</li><li>Hierarchy</li></ol><div><br></div><div><br></div><h3>Abstraction</h3></div><div>Versimpel van model</div><div><ul><li>Verbergen van details&nbsp;</li><li>Alleen essentiele informatie laten zien</li></ul><div><span style="font-weight: bold;">Objecten&nbsp;</span>als kernabstractie,&nbsp;</div></div><div>groepereing van :</div><div><ul><li>Gedrag, methods&nbsp;</li><li>Toestand, fields</li></ul><div><span style="font-weight: bold;">Klassen&nbsp;</span>als blauwdruk&nbsp;</div></div><div>in (OO based programming)</div><div><br></div><div><br></div><div><br></div><h3>Encapsulation (Tell, don't ask)</h3><div>Object bevat gedrag en toestand</div><div><ul><li>Gericht op een functionaliteit&nbsp;</li><li><span style="font-style: italic;">Encapsulate what varies&nbsp;</span></li><li>Modularity</li></ul><div>Afgeschermd van andere objecten door middel van&nbsp;</div></div><div><span style="font-weight: bold;">visibility</span></div><div><ul><li>Private, protected, public</li><li>information hiding</li></ul><div>Toegang alleen via de publieke methods</div></div><div>(Object's API)</div><div><br></div><div>Het object is:</div><div><ul><li>Verantwoordelijk</li><li>Kenniseigenaar&nbsp;</li><li>Uitvoerende&nbsp;</li></ul><div><span style="font-weight: bold;">Niet</span>: Data uit object halen&nbsp;<span style="font-weight: bold;">(getters)</span></div></div><div>verwerken en dan weer terug geven&nbsp;<span style="font-weight: bold;">(setters)</span></div><div><span style="font-weight: bold;"><br></span></div><div><span style="font-weight: bold;">Liever:&nbsp;</span>Het object vertellen wat te doen</div><div><br></div><div><br></div><h3>Polymorphism</h3><div>Veelvormigheid</div><div><ul><li>Een abstractie kan meerdere implementaties hebben.</li><li>Gebruikt om abstractie en implementatie te scheiden, implementaties zijn inwisselbaar.</li></ul><div>Subtype polymorphisme</div></div><div><ul><li>Implementeren van interfaces.</li><li>Extenden van klasse.</li></ul><div>Parametric polymorphism</div></div><div><ul><li>Generics</li></ul><div><br></div></div><h3>Inheritance</h3><div>Overerven van methods en properties</div><div><ul><li>van parent (supertype)</li><li>door child (subtype)</li></ul><div>Interface inheritance&nbsp;</div></div><div><ul><li>Neem method signatures over van interface en vul deze in.</li></ul><div>Implementation inheritance</div></div><div><ul><li>Neem methods en properties over van een parent klasse, maar wijzig deze waar mogelijk of nodig.</li></ul><div><br></div></div><h3>Composition over Inheritance</h3><div>Implementation inheritance zorgt&nbsp;</div><div>voor coupling tussen kind en ouder</div><div><br></div><div>Gebruik composition in plaats van inheritance om gedrag&nbsp;</div><div>herbruikbaar te maken op een losgekoppelde manier.</div><div><br></div><div>Toch implementation inheritance?</div><div><ul><li>Niet te diep!</li><li>Liever abstract klasse.</li></ul><div><br></div></div><h2>SOLID</h2><div><br></div><div>Single Responibility Principle</div><div><ul><li>Een klasse, een verandwoordelijkheid.</li></ul><div>Open Closed Principle</div></div><div><ul><li>Open voor uitbreiding, gesloten voor wijzigingen.</li></ul><div>Liskov Substitution Principle&nbsp;</div></div><div><ul><li>Child klasse moeten in lijn zijn met hun parent, siblings moeten vervangbaar zijn.</li></ul><div>Interface Segregation Principle</div></div><div><ul><li>Dwing een implementatie niet om methoden te implementeren die deze niet nodig heeft.</li></ul><div>Dependency Inversion Principle</div></div><div><ul><li>Implementaties moeten afhankelijk zijn van abstracties, niet andersom.&nbsp;</li></ul><div><br></div></div><div><br></div><h2>Don't repeat yourself (DRY)</h2><div>Voorkom duplicatie van concepten binnen je code.</div><div><br></div><div>Avoid Hasty Abstractions (AHA)</div><div>Koppel niet te vroeg dingen aan elkaar enkel om duplicaties te voorkomen.</div><div><br></div><div>The rule of three</div><div>Wanneer je op drie verschillende plekken dezelfde code vindt,&nbsp;</div><div>wil je dit misschien anders aanpakken.</div><div><br></div><h2>Code smells</h2><div>De aanwijzing dat er ergens iets niet helemaal goed</div><div>zou kunnen zijn qua structuur of ontwerp</div><div><ul><li>Een indicatie van een mogelijk ontwerpprobleem&nbsp;</li></ul><div>Hier kan je op 3 manieren mee omgaan:</div></div><div><ol><li>Negeren, onverstandig</li><li>Per geval beoordelen of je het kan/moet oplossen, verstandig</li><li>Altijd vermijden, puristisch</li></ol><div><br></div></div><div>De hoeveelheid code is belangrijk</div><div><span style="font-weight: bold;">minder code</span>&nbsp;betekent&nbsp;<span style="font-weight: bold;">minder bugs</span></div><div><span style="font-weight: bold;"><br></span></div><div>Maar ga niet:</div><div><ul><li>Variabelen verkorten</li><li>White space weghalen</li><li>Formatting versimpelen</li><li>Bracketless if statements<br></li></ul><div>Hierdoor word je code minder leesbaar en onderhoudbaar</div></div><div><br></div><div><div><h3>Voorkomen van code smells</h3></div><div><ul><li>Kritisch naar je code kijken.</li><li>Gebruik te maken van style guides.</li><li>Gebruik te maken van code reviews.</li><li>Gebruik te maken van static analysis tools</li><li>Werken met een kwaliteitsgerichte workflow zoals een continuous integration pipeline</li></ul></div></div><div><br></div><div><h3>Code smell vermijden: Functions / methods&nbsp;</h3><div><ul><li>Liever veel kleine methods die 1 ding doen dan 1 grote method die heel veel doet</li><li>Vervang nesting en error handling met method calls&nbsp;</li><li>Hetzelfde abstractie niveau binnen een method (Law of demeter)</li><li>Hoe minder parameters, hoe beter</li><li>Liever een nieuwe method dan extra paremeters toevoegen</li><li>Verwijder dode code en debug code uit productiesoftware&nbsp;</li><li>Maak onderscheid tussen methods met effecten en methods zonder deze</li></ul></div></div><div><br></div><h3>Code smell vermijden: Meaningfull names&nbsp;</h3><div>- Geef variabelen namen die betekenis hebben</div><div><br></div><div>- Wees consistent, duidelijk en maak onderscheid</div><div><span style="font-style: italic;">Geen verwarrende namen die verkeerd geinterpreteerd kunnen worden.</span></div><div><br></div><div>- Geen flauwigheid, memes of onduidelijke metamorfen.&nbsp;</div><div><br></div><div>- Zorg dat namen uitgesproken en gevonden kunnen worden</div><div><span style="font-style: italic;">Maak ze voorspelbaar</span></div><div><span style="font-style: italic;"><br></span></div><div>- Beschouw de naam in de context waarbinnen deze gebruikt wordt.</div><div><span style="font-style: italic;">De player heeft een name geen playerName</span></div><div><span style="font-style: italic;"><br></span></div><h3>Code smell vermijden: Comments</h3><div>Goede namen zijn beter dan goede comments&nbsp;</div><div><br></div><div>Comments zijn meestal goed als ze:</div><div><ul><li>Verplicht zijn&nbsp;</li><li>Verklarend, informeren of waarschuwend zijn</li><li>Worden gebruikt om documentatie te geneneren</li></ul><div>Comments zijn meestal slecht als ze:</div></div><div><ul><li>Niet uitleggen, niks toevoegen bovenop naamgeving.</li><li>Misleidend of verouderd zijn</li><li>Teveel informatie geven</li></ul><div>We vergeten vaak comments te veranderen als de code word aangepast.</div></div><div><br></div><h3><br></h3><div><h3>Code smell vermijden: Vertical formatting&nbsp;</h3></div><div>Gerbuik witregels om leesbaarheid te vergroten</div><div><ul><li>Sla een witregel over om concepten te groeperen&nbsp;<span style="background-color: var(--background); color: var(--editor-text);">binnen of buiten een methode</span></li></ul><div>Gebruik&nbsp; volgorde om caller en callee te onderscheiden.</div></div><div><ul><li>Public methods bovenin&nbsp;</li><li>Private methods onderin</li></ul><div><br></div></div><h3>Code smell vermijden: Horizontal formatting</h3><div>Maak regels niet te wijd.</div><div><ul><li>Start op een nieuwe regel met indentation om het meer leesbaar te maken.</li><li>Geen afkortingen om het maar kort te houden.</li></ul><div><br></div></div></div><h3>Technical debt</h3><div>Code smells kunnen leiden to technical debt</div><div><ul><li>De hoeveelheid werk of kosten veroorzaakt door het kiezen van een minder geschikte oplossing.</li></ul><div>Het ontwikkelteam bouwt als het ware een schuld&nbsp;</div></div><div>op die tijdig&nbsp;<span style="background-color: var(--background); color: var(--editor-text); font-size: 11pt;">terugbetaald</span><span style="background-color: var(--background); color: var(--editor-text); font-size: 11pt;">&nbsp;moet worden.</span></div><div><span style="background-color: var(--background); color: var(--editor-text); font-size: 11pt;"><br></span></div><div><span style="background-color: var(--background); color: var(--editor-text); font-size: 11pt;">Doe je dit niet wordt de schuld steeds duurder</span></div><div><span style="background-color: var(--background); color: var(--editor-text); font-size: 11pt;">vanwege de rente.</span></div><div><ul><li><span style="background-color: var(--background); color: var(--editor-text); font-size: 11pt;">Bijvoorbeeld een onhandige structuur kan ervoor zorgen dat het opleveren van nieuwe features veel langer kan duren.</span></li><li><span style="background-color: var(--background); color: var(--editor-text); font-size: 11pt;">Des te langer je zo doorgaat, des te lstiger development wordt.</span></li></ul></div><div><br></div>