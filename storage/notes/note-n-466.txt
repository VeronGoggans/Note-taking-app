<h1 style="text-align: center;">Samenvatting Examenstof CICQ</h1><div style="text-align: center;"><img src="https://s24534.pcdn.co/carreira-sucesso/wp-content/uploads/sites/3/2022/12/Desenvolvedor-de-software.jpg" alt=""><br></div><div><br></div><div><span style="font-weight: bold;">Wat is ISO 25010?</span></div><div>De iso 25010 is een richtlijn voor softwarekwaliteit</div><div><br></div><div><br></div><div><span style="font-weight: bold;">Wat is goede software?&nbsp;</span></div><div>De mate waarin wordt voldaan aan de gestelde en verwachte behoeften&nbsp;</div><div>van de belanghebbenden en zodoende waarde biedt</div><div><br></div><div><br></div><div><span style="font-weight: bold;">ISO 25010 aanwijzingen voor goede software kwaliteit.</span></div><div><ul><li>Functional suitablity: Werkt de software qua features na behoren</li><li>Performance: Werkt de gode efficient</li><li>Security: Is de software veilig</li></ul><div><br></div><h2>Software ontwikkelings methoden</h2><div><span style="font-weight: bold;">Waterfall</span></div><div><ul><li>Gefaseerd, weinig communicatie en trage feedback</li></ul><div><span style="font-weight: bold;">Agile</span></div></div><div><ul><li>Wendbaarheid (niet per se sneller)</li><li>Iteratief, incrementeel en snelle feedback</li></ul><div><span style="font-weight: bold;">Nadelen Agile</span></div><div><span style="background-color: var(--background); color: var(--editor-text);">1. Feedback loops kunnen niet nuttig zijn aangezien je vaak feedback krijgt.</span></div><div><br></div><h2>Iteratieve ontwikkeling</h2></div><div style="text-align: center;"><img src="https://www.sbiformaat.nl/wp-content/uploads/2020/06/Agile-blog2-1200x628.jpg" alt="Jip en Janneke gaan agile - Scrum - Blog - SBI Formaat"><br></div><div style="text-align: center;"><span style="font-weight: bold;">Requirements, Design, Develepment, Test, Deploy</span></div><div style="text-align: center;"><span style="font-weight: bold;"><br></span></div><div><span style="font-weight: bold;">Korte iteraties:&nbsp;</span>Liever weken dan maanden</div><div><span style="font-weight: bold;">Geen hands-off:</span>&nbsp;Het hele team werkt samen.</div><div>Na elke iteratie leren</div><div><br></div><div><div><span style="font-weight: bold;">Regelmatig functionaliteit opleveren in&nbsp;</span></div><div><span style="font-weight: bold;">samenwerking met de klant</span></div><div><ul><li>Focus op waarde</li><li>Vroegtijdige feedback en evaluatie</li><li>Opbouwen relatie en begrip opdrachtgever</li></ul></div><div><br></div><h2>Integratie van code</h2><div>Na het programmeren: code integreren</div><div><ul><li>Bestaande code + nieuwe code</li></ul></div><div><br></div><h2>Continuous Integration (CI)</h2><div><span style="font-weight: bold;">Voortdurend:</span>&nbsp;beoordelen of nieuwe code integreert met bestaande code</div><div><ul><li>Compileert de code?</li><li>Slagen de geautomatiseerde tests van functionaliteit?</li><li>Slagen de andere checks (Security, Performance, Maintainability)</li><li>Handmatige review van collega's (code review)</li></ul></div><div><span style="font-weight: bold;">Regelmatig:</span>&nbsp;zo vaak en snel mogelijk om conflicts te voorkomen.&nbsp;</div><div><ul><li>Integrate At Least Once A Day</li><li>Small commits, short lived branches en Github Flow</li></ul></div><div>Checkout then Compile and finaly Test</div><div><br></div><div><br></div><div><span style="font-weight: bold;">Wat is een countinuous integration pipeline?</span></div><div><span style="font-style: italic;">"Met een continuous integration pipeline integreer je regelmatig code op een&nbsp;</span></div><div><span style="font-style: italic;">centraal punt, bijvoorbeeld naar een remote repository, vaak reautomatiseerd</span></div><div><span style="font-style: italic;">met Github Actions"</span></div><div><br></div><div><span style="font-weight: bold;">Hoe kan een continuous integration pipeline bijdragen aan de&nbsp;</span></div><div><span style="font-weight: bold;">kwaliteitsbewaking van een software project?</span></div><div><span style="font-style: italic;">"Countinuous integration draagt bij aan kwaliteitsbewaking omdat je kunt inzien&nbsp;</span></div><div><span style="font-style: italic;">of bestaande code nog compileert of functionaliteit breekt wanneer nieuwe code wordt toegevoegd."</span></div><div><br></div><div><br></div><h2>Continuous Delivery (CD)</h2><div><br></div><div>Er moet een proces zijn waarbinnen software altijd in een Deploybare staat bevindt</div><div>Dit is te bereiken door:</div><div><ul><li>Met kleine commits te werken&nbsp;</li><li>De main altijd deploybaar houden</li></ul></div><div><br></div><h2>Hoare's Triple</h2><div><span style="font-weight: bold;">P {Q} R</span></div><div>Preconditie (P)</div><div><ul><li>Gegeven een bepaalde begintoestand</li></ul></div><div>Actie (Q)</div><div><ul><li>Wanneer ik een bepaalde actie uitvoer&nbsp;</li></ul></div><div>Postconditie</div><div><ul><li>Dan moet er een gewenste eindtoestand komen&nbsp;</li></ul></div><div><br></div><div>other ways to say it</div><div><br></div><div><span style="font-weight: bold;">Gherkin</span></div><div><ul><li>Given, when, then</li></ul></div><div><span style="font-weight: bold;">3A's</span></div><div><ul><li>Arrange, act, assert</li></ul></div><div><br></div><h2>3A's of extreme programming</h2><div>Arrange</div><div>Setup de condities voor een bepaalde test case.</div><div><br></div><div>Act</div><div>In deze stap word de test uitgevoerd.</div><div><br></div><div>Assert</div><div>En tot slot word de test gevalideert.</div><div><br></div><h2>Pair programming</h2><div style="text-align: center;"><img src="https://raw.githubusercontent.com/DXHeroes/knowledge-base-content/master/files/pair-programming.svg?sanitize=true" alt="Pair Programming | Developer Experience Knowledge Base"><br></div><div>Pair programming is een methodology waar er wordt geprogrammeerd in twee tallen.&nbsp;</div><div>Een <span style="font-weight: bold;">Writter </span>de persoon die do software schrijft, en de <span style="font-weight: bold;">Observer </span>de persoon die de code reviewed.</div><div><br></div><div>Voordelen</div><div><ul><li>Gedeelde kennis</li><li>Betere focus</li><li>Continuous feedback&nbsp;</li><li>Minder bugs</li><li>Samenwerking</li></ul><div>Nadelen</div></div><div><ul><li>Skill mismatch&nbsp;</li></ul></div><div><br></div><h2>Wat is een regressie?</h2><div>Een regressie gebeurt wanneer nieuwe code ervoor</div><div>zorgt dat oude code niet goed meer functioneert. Geautomatiseerde test kunnen regressies voorkomen door zicht te houden op bepaald kwaliteits aspecten die je verwacht de code te hebben.&nbsp;</div><div><br></div><div><br></div><h2>Test Driven Development (TDD)</h2><div style="text-align: center;"><img src="https://marsner.com/wp-content/uploads/test-driven-development-TDD.png" alt="Why Test-Driven Development (TDD) | Marsner Technologies"><br></div><div><div>Red Green Refactor</div><div><ul><li>Schrijf een test en laat hem falen</li><li>Schrijf de simpelste implementatie die slaagt</li><li>Verbeter de eerste implementatie</li></ul></div><div>Voordelen</div><div><ul><li>Test zijn voorbeelden van hoe het moet werken</li><li>Alle code is gedekt door tests</li><li>Vooral code geschreven die nodig is</li><li>Alle code is testbaar geschreven</li></ul></div><div style="text-align: center;"><img src="https://media.geeksforgeeks.org/wp-content/cdn-uploads/20200514113957/What-is-Unit-Testing-and-Why-Developer-Should-Learn-It.png" alt="What is Unit Testing and Why Developer Should Learn It ? - GeeksforGeeks"><br></div><h2>(Unit) Tests should be FIRST (T)</h2><div><ol><li>Fast</li><li>Isolated</li><li>Repeatable</li><li>Self-validating</li><li>Timely</li><li>(Thorough)</li></ol></div><div><br></div><div><span style="font-weight: bold;">Fast Tests</span></div><div>We willen snelle feedback (tests moeten dus snel zijn)</div><div>Maak de testen dus klein.</div><div><br></div><div><span style="font-weight: bold;">Isolated Tests</span></div><div>Testen moeten op zichzelf kunnen staan, geen side efects met andere testen.</div><div>Focus op een aspect van het gedrag (Single Responsibility Principle)</div><div><br></div><div><span style="font-weight: bold;">Repeatable Tests</span></div><div>Een test moet elke keer de zelfde uitkomst hebben.</div><div>Tests die af en toe slagen noem je flaky</div><div><br></div><div><span style="font-weight: bold;">Self-validating Tests</span></div><div>Een test moet zelf aangeven of die slaagt of niet.</div><div>De resultaten moeten niet open staan ter interpretatie.</div><div><span style="font-weight: bold; text-decoration-line: underline;">PASS&nbsp;</span>or&nbsp;<span style="font-weight: bold; text-decoration-line: underline;">FAIL&nbsp;</span>no&nbsp;<span style="font-weight: bold; text-decoration-line: underline;">MAYBE</span></div><div><span style="font-weight: bold; text-decoration-line: underline;"><br></span></div><div><span style="font-weight: bold;">Timely</span></div><div>Test moeten idealiter gemaakt worden voor de implementatie van de code.&nbsp;</div><div>Zo heeft de programmeur een goed verstand van hoe de functionaliteit moet werken.</div><div>&nbsp;</div><div><br></div><div><span style="font-weight: bold;">Waarom testen we?</span></div><div><ol><li>Specificeren verreisten</li><li>Bewijs verreisten</li><li>Voorkomen regressies</li><li>ondersteuning ontwerp</li><li>documentatie&nbsp;</li></ol></div><div><span style="font-weight: bold;">Hoe houden we test code onderhoudbaar?</span></div><div><ul><li>Private methods (Om duplicatie te voorkomen)</li><li>Factories/Builders (Om setup code te versimpelen)</li><li>Parameterised tests (Om dezelfde tests te draaien met verschillende input)</li><li>Lifecycle methods</li></ul></div><div style="text-align: center;"><img src="https://assets.codegrip.tech/wp-content/uploads/2019/10/04113325/1_Y07KF-_laqG2cJ1Squ0Bag.png" alt="How to unit test and practice test-driven development - Codegrip"><br></div><h2>4 fases van een test</h2><div>1. setup</div><div><ul><li>System under test (SUT) opzetten&nbsp;</li></ul></div><div>2. Exercise&nbsp;</div><div><ul><li>De testen actie uitvoeren op SUT</li></ul></div><div>3. Verify</div><div><ul><li>Resultaat van actie varifieren</li></ul></div><div>4. Tear down&nbsp;</div><div><ul><li>Opruimen system under test SUT</li></ul></div><div><br></div><h2>Lifecycle annotations</h2><div><ul><li><span style="font-weight: bold;">@BeforeAll</span>: een moment voor alle tests (setup per class)</li><li><span style="font-weight: bold;">@BeforeEach</span>: elke keer voor een test case (setup per method)</li><li><span style="font-weight: bold;">@AfterEach</span>: elke keer na een test case (tear down per method)</li><li><span style="font-weight: bold;">@AfterAll</span>: een moment na alle test cases (tear down per class)</li></ul><div>Voor elke test case een file weggooien&nbsp;</div></div><div><span style="font-weight: bold;">@BeforeEach</span></div><div><br></div><div>Na alle test cases de file weggooien&nbsp;</div><div><span style="font-weight: bold;">@AfterAll</span>&nbsp;</div><div><br></div><div>Voordelen</div><div><ul><li>Korte test cases</li><li>minder herhaling&nbsp;</li></ul><div>Nadelen&nbsp;</div></div><div><ul><li>Mogelijk minder leesbare test cases&nbsp;</li><li>Je hebt meer context nodig&nbsp;</li><li>Setup en tear down word uitgevoerd voor een test case ook al is dat niet nodig&nbsp;</li></ul><div><br></div></div><div><div><span style="font-weight: bold;">Tijdens het testen merkt Herman dat hij in elke testcase steeds het</span></div><div><span style="font-weight: bold;">csv-bestand moet weggooien voordat hij een operatie kan</span></div><div><span style="font-weight: bold;">uitvoeren. Ook zou hij graag elke test met een schone lei beginnen</span></div><div><span style="font-weight: bold;">en eindigen: er moet geen file overblijven.</span></div></div><div><span style="font-weight: bold;"><br></span></div><div><div><span style="font-weight: bold;">Met welke test pattern kan Herman dit op een onderhoudbare</span></div><div><span style="font-weight: bold;">manier aanpakken?</span></div></div><div><span style="font-style: italic;">"@BeforeEach, @BeforeAll, @AfterAll en @AfterEach"</span></div><div><span style="font-style: italic;"><br></span></div><h2>Integration tests</h2><div>Met een integratie test word getets of de samenhang van het gehele software systeem&nbsp;</div><div>goed met elkaar samenwerkt.&nbsp;</div><div><br></div><div>End to End test</div><div>Hier wordt de hele interactie van een usecase getest. Van begin tot eind (Controller tot Domain)</div><div><span style="font-style: italic;"><br></span></div><div style="text-align: center;"><img src="https://about.codecov.io/wp-content/uploads/2021/02/8-factors-Influencing.png" alt="8 Factors Influencing Your Approach to Code Coverage - Codecov"><span style="font-style: italic;"><br></span></div><h2>Code coverage 🥭</h2><div><br></div><div>Welke&nbsp;<span style="font-weight: bold;">drie soorten coverage</span>&nbsp;kan men over het&nbsp;</div><div>algemeen ondercheiden?</div><div><span style="background-color: var(--background); color: var(--editor-text);"><br></span></div><div><span style="background-color: var(--background); color: var(--editor-text);"><br></span></div><div><span style="color: var(--editor-text); font-weight: bold;">1. Statement / line coverage</span></div><div><ul><li><span style="color: var(--editor-text);">Welke regels zijn gedekt?</span></li></ul></div><div><span style="color: var(--editor-text);"><br></span></div><div><span style="color: var(--editor-text); font-weight: bold;">2. Branch coverage&nbsp;</span></div><div><ul><li><span style="color: var(--editor-text);">Welke paden zijn gedekt?</span></li></ul></div><div><br></div><div><span style="font-weight: bold;">3. Mutation coverage</span></div><div><ul><li>Hoe betrouwbaar zijn de tests?</li><li>Implementatie word gewijzigd zodat sommige test zouden moeten falen.&nbsp;</li><li>Zo niet, dan is de test minder betrouwbaar.</li></ul></div><div><br></div><h3>Mutation testing</h3><div>Coverage zegt niet of er daadwerkelijk assertions worden gedaan op de&nbsp;</div><div>gedekte code</div><div><br></div><div>Het laat alleen zien welke code wordt aangeraakt tijdens het runnen van&nbsp;</div><div>de tests&nbsp;</div><div><br></div><div>Met mutation tests draai je de tests, maar de testtool maakt aanpassingen&nbsp;</div><div>in de implementatiecode.</div><div>Bijvoorbeeld:&nbsp;</div><div><ul><li>Return Customer wordt return null</li><li>== wordt !=</li><li>&gt; wordt &gt;=</li></ul><div>Hiervoor kan je in Java&nbsp;<span style="font-weight: bold;">Pitest&nbsp;</span>gebruiken.</div><div><br></div><div style="text-align: center;"><br></div><h2>Services</h2><div>Een applicatie is een samenstelling van services, en leven zolang als de&nbsp;</div><div>applicatie draait</div><div><br></div><div>Services bieden het volgende:</div><div><ul><li>Use cases aanbieden (application)</li><li>Contact met een exstern systeem aanbieden, zoals een database (data)</li><li>Aanroep logica verzorgen (presentation)</li></ul><div>Dependency injection van services doe je vaak vie aan framework&nbsp;</div></div><div><ul><li>Veel andere objecten (bijvoorbeeld domeinobjecten) stel je samen door via&nbsp;</li><li><span style="font-weight: bold;">collaborators</span>&nbsp;in de constructor mee te geven&nbsp;</li></ul></div><div><br></div></div><div style="text-align: center;"><img src="https://media.licdn.com/dms/image/D4D12AQGSXuIJgTKL6Q/article-cover_image-shrink_720_1280/0/1699469125813?e=2147483647&amp;v=beta&amp;t=x4n_5uucpRetyv5cF1gV26GQaqwYKiwVUYccB_R1C44" alt="Implementation of Dependency Injection Pattern in C#"><br></div><h2>Dependency injection</h2><div><br></div><div>Niet dependency aanmaken in klasse, maar meegeven aan klasse ofwel:</div><div><ul><li>In de constructor</li><li>Via setter of methode</li><li>Via property</li></ul><div>Loose coupling dankzij&nbsp;<span style="font-style: italic;">inversion of control:&nbsp;</span>de gebruiker van de klasse kan aanvullen,</div></div><div>inplaatsvan dat de klasse zelf dat bepaald.</div><div><ul><li>Favor Composition over Inheritance</li><li>Program to an Interface</li><li>Open Closed + Dependency Inversion</li></ul><div><br></div><h2>Test doubles&nbsp;</h2></div></div></div><div><div>Je kan een object meegeven dat alleen maar gebruikt wordt</div><div>voor testen</div><div><br></div><div>Dit noem je een&nbsp;<span style="font-weight: bold;">Test Double&nbsp;</span></div><div><ul><li>Denk aan stunt double (is er alleen voor het uitvoeren van een bepaalde taak)</li><li>Soms ook een mock object (ook een soort van test double)</li><li>Soms ook Imposter</li></ul><h3>Test doubles smaakjes</h3><div><span style="font-weight: bold;">1. Dummy</span></div><div><span style="color: var(--editor-text);">Vullen van parameters&nbsp;</span></div><div><span style="background-color: var(--background); color: var(--editor-text);"><br></span></div><div><span style="font-weight: bold;">2. Stub</span></div><div>Voor geprogrammeerde antwoorden&nbsp;</div><div><br></div><div><span style="font-weight: bold;">3. Fake</span></div><div>Versimpelde werkende implementatie</div><div><br></div><div><span style="font-weight: bold;">4. Spy</span></div><div>Stub die dingen bijhoud om assertions er op te doen</div><div><br></div><div><span style="font-weight: bold;">5. Mock</span></div><div>Een fake die assertions doet over te verwachten calls</div><div><br></div><div><br></div><div><div><span style="font-weight: bold;">Leg uit hoe dependency injection het makkelijker</span></div><div><span style="font-weight: bold;">maakt om units in isolatie en herhaalbaar te</span></div><div><span style="font-weight: bold;">testen</span></div></div><div><span style="font-style: italic;">"Door afhankelijkheden (dependencies) mee te geven aan het object&nbsp;</span></div><div><span style="font-style: italic;">inplaats van dat het word aangemaakt in het object zelf, krijg je er controle over.</span></div><div><span style="font-style: italic; color: var(--editor-text);">Dit maakt het mogelijk ze tijdens testen te vervangen met test doubles"</span></div><div><span style="font-style: italic; background-color: var(--background); color: var(--editor-text);"><br></span></div><div style="text-align: center;"><img src="https://media.dev.to/cdn-cgi/image/width=1000,height=500,fit=cover,gravity=auto,format=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2Fdmmxiwgyuzodl7yqyuca.jpeg" alt="Spring Boot: Everything you need to know, and what nobody told you. Part I  - DEV Community"><span style="font-style: italic; background-color: var(--background); color: var(--editor-text);"><br></span></div><h2>Testen met spring boot</h2><div><div>Om de integratie binnen Spring Boot te</div><div>testen kunnen we&nbsp;<span style="font-weight: bold;">@SpringBootTest</span>&nbsp;gebruiken</div></div><div><br></div><div>Deze tests starten alles op</div><div><br></div><div><ul><li>Laadt applicatieconfiguraties</li><li>Laadt alle gevonden&nbsp;<span style="font-weight: bold;">dependencies&nbsp;</span>in (@Service, @Component, @Bean)</li><li>Stelt alle routes in voor de controllers&nbsp;</li><li>Stelt databaseverbindingen in</li></ul><div>Bij het testen kan je bepaalde dependencies overschrijven met een test double&nbsp;</div></div><div>Binnen een&nbsp;<span style="font-weight: bold;">@SpringBootTest&nbsp;</span>kan je een attribuut aanwijzen met <b>@MockBean:</b></div><div>Dit mockt de gevonden dependency</div><div><br></div><div><span style="font-weight: bold;">Stel dat we onze code volledig en betwouwbaar hebben gedekt&nbsp;</span></div><div><span style="font-weight: bold;">met tests van verschillende reikwijdtes.</span></div><div><span style="font-weight: bold;"><br></span></div><div><span style="font-weight: bold;">Zal deze software dan nooit bugs bevatten?</span></div><div><br></div><div><br></div><div style="text-align: center;"><img src="https://bluebirdinternational.com/wp-content/uploads/2023/08/agile-testing-pyramid-bluebird-scaled.jpg" alt="Testing Pyramid"><br></div><h2 style="text-align: left;">Agile test pyramid</h2><div><span style="font-weight: bold;">Unit tests&nbsp;</span></div><div>Veel isolatie, sneller, minder breekbaar</div><div><br></div><div><span style="font-weight: bold;">Service tests</span></div><div>Meer integratie, wat langzamer</div><div><br></div><div><span style="font-weight: bold;">UI tests</span></div><div>erg veel integratie, langaam, breekbaar&nbsp;</div><div><br></div><div><br></div><div>De Agile test pyramid is een aanpak die de balans zoekt tussen&nbsp;</div><div><ul><li>Snelle feedback&nbsp;</li><li>Reikwijdte</li><li>Weinig breekbare tests</li><li>Realisme</li></ul><div>Steek de meeste aandacht aan unit tests</div></div><div>Minder aan integratie tests&nbsp;</div><div>en het minste tijd aan UI tests</div><div><br></div><h2>Acceptance test</h2><div>Een acceptatietestwordt traditioneel door de eindgebruiker uitgevoerd</div><div>om te controleren of de software voldoet aan de features zoals afgesproken.&nbsp;</div><div><br></div></div></div></div>